/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI（ChatGPT） - version 1.0.0
 *
 * Open AI（ChatGPT）几乎可以应用于任何涉及理解或生成自然语言或代码的任务。我们提供一系列具有不同功率级别的模型，适用于不同的任务，并且能够微调您自己的自定义模型。这些模型可用于从内容生成到语义搜索和分类的所有领域。


 *
 * OpenAPI version: 3.0.0
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

declare global {
  interface Openais {
    general: {
      /**
       * ---
       *
       * [POST] 创建语音
       *
       * **path:** /v1/audio/speech
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 可用的 TTS 模型之一:tts-1 或 tts-1-hd
       *   // [required]
       *   model: string
       *   // 要生成音频的文本。最大长度为4096个字符。
       *   // [required]
       *   input: string
       *   // 生成音频时使用的语音。支持的语音有:alloy、echo、fable、onyx、nova 和 shimmer。
       *   // [required]
       *   voice: string
       *   // 默认为 mp3 音频的格式。支持的格式有:mp3、opus、aac 和 flac。
       *   response_format?: string
       *   // 默认为 1 生成的音频速度。选择0.25到4.0之间的值。1.0是默认值。
       *   speed?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = object
       * ```
       */
      post_v1_audio_speech<
        Config extends Alova2MethodConfig<object> & {
          data: {
            /**
             * 可用的 TTS 模型之一:tts-1 或 tts-1-hd
             * [required]
             */
            model: string;
            /**
             * 要生成音频的文本。最大长度为4096个字符。
             * [required]
             */
            input: string;
            /**
             * 生成音频时使用的语音。支持的语音有:alloy、echo、fable、onyx、nova 和 shimmer。
             * [required]
             */
            voice: string;
            /**
             * 默认为 mp3 音频的格式。支持的格式有:mp3、opus、aac 和 flac。
             */
            response_format?: string;
            /**
             * 默认为 1 生成的音频速度。选择0.25到4.0之间的值。1.0是默认值。
             */
            speed?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<object, 'general.post_v1_audio_speech', Config>;
      /**
       * ---
       *
       * [POST] 创建转录
       *
       * **path:** /v1/audio/transcriptions
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 要转录的音频文件，采用以下格式之一：mp3、mp4、mpeg、mpga、m4a、wav 或 webm。
       *   // [required]
       *   file: Blob
       *   // 要使用的模型的 ID。仅`whisper-1`当前可用。
       *   // [required]
       *   model: string
       *   // 可选文本，用于指导模型的风格或继续之前的音频片段。提示应[与](https://platform.openai.com/docs/guides/speech-to-text/prompting)音频语言相匹配。
       *   prompt?: string
       *   // 成绩单输出的格式，采用以下选项之一：json、text、srt、verbose_json 或 vtt。
       *   response_format?: string
       *   // 采样温度，介于 0 和 1 之间。较高的值（如 0.8）将使输出更加随机，而较低的值（如 0.2）将使输出更加集中和确定。如果设置为 0，模型将使用[对数概率](https://en.wikipedia.org/wiki/Log_probability)自动升高温度，直到达到特定阈值。
       *   temperature?: number
       *   // 输入音频的语言。[以ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)格式提供输入语言将提高准确性和延迟。
       *   language?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   text: string
       * }
       * ```
       */
      post_v1_audio_transcriptions<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          text: string;
        }> & {
          data: {
            /**
             * 要转录的音频文件，采用以下格式之一：mp3、mp4、mpeg、mpga、m4a、wav 或 webm。
             * [required]
             */
            file: Blob;
            /**
             * 要使用的模型的 ID。仅`whisper-1`当前可用。
             * [required]
             */
            model: string;
            /**
             * 可选文本，用于指导模型的风格或继续之前的音频片段。提示应[与](https://platform.openai.com/docs/guides/speech-to-text/prompting)音频语言相匹配。
             */
            prompt?: string;
            /**
             * 成绩单输出的格式，采用以下选项之一：json、text、srt、verbose_json 或 vtt。
             */
            response_format?: string;
            /**
             * 采样温度，介于 0 和 1 之间。较高的值（如 0.8）将使输出更加随机，而较低的值（如 0.2）将使输出更加集中和确定。如果设置为 0，模型将使用[对数概率](https://en.wikipedia.org/wiki/Log_probability)自动升高温度，直到达到特定阈值。
             */
            temperature?: number;
            /**
             * 输入音频的语言。[以ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)格式提供输入语言将提高准确性和延迟。
             */
            language?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          text: string;
        },
        'general.post_v1_audio_transcriptions',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建翻译
       *
       * **path:** /v1/audio/translations
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 要翻译的音频文件，支持以下格式：mp3，mp4，mpeg，mpga，m4a，wav 或 webm。
       *   // [required]
       *   file: Blob
       *   // (要使用的模型的 ID，目前仅有 whisper-1 可用。
       *   // [required]
       *   model: string
       *   // 一个可选的文本，用于指导模型的风格或继续先前的音频片段。 prompt 应为英文。
       *   prompt?: string
       *   // 转录输出的格式，支持以下选项之一：json、text、srt、verbose_json 或 vtt。
       *   response_format?: string
       *   // 采样温度，介于 0 和 1 之间。 较高的值（如 0.8）将使输出更随机，而较低的值（如 0.2）将使其更加专注和确定性。 如果设置为 0，则模型将使用对数概率自动增加温度，直到达到一定的阈值。
       *   temperature?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   text: string
       * }
       * ```
       */
      post_v1_audio_translations<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          text: string;
        }> & {
          data: {
            /**
             * 要翻译的音频文件，支持以下格式：mp3，mp4，mpeg，mpga，m4a，wav 或 webm。
             * [required]
             */
            file: Blob;
            /**
             * (要使用的模型的 ID，目前仅有 whisper-1 可用。
             * [required]
             */
            model: string;
            /**
             * 一个可选的文本，用于指导模型的风格或继续先前的音频片段。 prompt 应为英文。
             */
            prompt?: string;
            /**
             * 转录输出的格式，支持以下选项之一：json、text、srt、verbose_json 或 vtt。
             */
            response_format?: string;
            /**
             * 采样温度，介于 0 和 1 之间。 较高的值（如 0.8）将使输出更随机，而较低的值（如 0.2）将使其更加专注和确定性。 如果设置为 0，则模型将使用对数概率自动增加温度，直到达到一定的阈值。
             */
            temperature?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          text: string;
        },
        'general.post_v1_audio_translations',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建 Chat Completions
       *
       * **path:** /v1/chat/completions
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 要使用的模型的 ID。有关哪些模型可与聊天 API 一起使用的详细信息,请参阅模型端点兼容性表。
       *   // [required]
       *   model: string
       *   // 至今为止对话所包含的消息列表。Python 代码示例。
       *   // [required]
       *   messages: Array<{
       *     role?: string
       *     content?: string
       *   }>
       *   // 使用什么采样温度，介于 0 和 2 之间。较高的值（如 0.8）将使输出更加随机，而较低的值（如 0.2）将使输出更加集中和确定。  我们通常建议改变这个或`top_p`但不是两者。
       *   temperature?: number
       *   // 一种替代温度采样的方法，称为核采样，其中模型考虑具有 top_p 概率质量的标记的结果。所以 0.1 意味着只考虑构成前 10% 概率质量的标记。  我们通常建议改变这个或`temperature`但不是两者。
       *   top_p?: number
       *   // 默认为 1
       *   // 为每个输入消息生成多少个聊天补全选择。
       *   n?: number
       *   // 默认为 false 如果设置,则像在 ChatGPT 中一样会发送部分消息增量。标记将以仅数据的服务器发送事件的形式发送,这些事件在可用时,并在 data: [DONE] 消息终止流。Python 代码示例。
       *   stream?: boolean
       *   // 默认为 null 最多 4 个序列,API 将停止进一步生成标记。
       *   stop?: string
       *   // 默认为 inf
       *   // 在聊天补全中生成的最大标记数。
       *   //
       *   // 输入标记和生成标记的总长度受模型的上下文长度限制。计算标记的 Python 代码示例。
       *   max_tokens?: number
       *   // -2.0 和 2.0 之间的数字。正值会根据到目前为止是否出现在文本中来惩罚新标记，从而增加模型谈论新主题的可能性。  [查看有关频率和存在惩罚的更多信息。](https://platform.openai.com/docs/api-reference/parameter-details)
       *   presence_penalty?: number
       *   // 默认为 0 -2.0 到 2.0 之间的数字。正值根据文本目前的存在频率惩罚新标记,降低模型重复相同行的可能性。  有关频率和存在惩罚的更多信息。
       *   frequency_penalty?: number
       *   // 修改指定标记出现在补全中的可能性。
       *   //
       *   // 接受一个 JSON 对象,该对象将标记(由标记器指定的标记 ID)映射到相关的偏差值(-100 到 100)。从数学上讲,偏差在对模型进行采样之前添加到模型生成的 logit 中。确切效果因模型而异,但-1 和 1 之间的值应减少或增加相关标记的选择可能性;如-100 或 100 这样的值应导致相关标记的禁用或独占选择。
       *   logit_bias?: unknown | null
       *   // 代表您的最终用户的唯一标识符，可以帮助 OpenAI 监控和检测滥用行为。[了解更多](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids)。
       *   user?: string
       *   // 指定模型必须输出的格式的对象。  将 { "type": "json_object" } 启用 JSON 模式,这可以确保模型生成的消息是有效的 JSON。  重要提示:使用 JSON 模式时,还必须通过系统或用户消息指示模型生成 JSON。如果不这样做,模型可能会生成无休止的空白流,直到生成达到令牌限制,从而导致延迟增加和请求“卡住”的外观。另请注意,如果 finish_reason="length",则消息内容可能会被部分切断,这表示生成超过了 max_tokens 或对话超过了最大上下文长度。  显示属性
       *   response_format?: object
       *   // 此功能处于测试阶段。如果指定,我们的系统将尽最大努力确定性地进行采样,以便使用相同的种子和参数进行重复请求应返回相同的结果。不能保证确定性,您应该参考 system_fingerprint 响应参数来监控后端的更改。
       *   seen?: number
       *   // 模型可以调用的一组工具列表。目前,只支持作为工具的函数。使用此功能来提供模型可以为之生成 JSON 输入的函数列表。
       *   // [required]
       *   tools: string[]
       *   // 控制模型调用哪个函数(如果有的话)。none 表示模型不会调用函数,而是生成消息。auto 表示模型可以在生成消息和调用函数之间进行选择。通过 {"type": "function", "function": {"name": "my_function"}} 强制模型调用该函数。  如果没有函数存在,默认为 none。如果有函数存在,默认为 auto。  显示可能的类型
       *   // [required]
       *   tool_choice: object
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created: number
       *   // [required]
       *   choices: Array<{
       *     index?: number
       *     message?: {
       *       // [required]
       *       role: string
       *       // [required]
       *       content: string
       *     }
       *     finish_reason?: string
       *   }>
       *   // [required]
       *   usage: {
       *     // [required]
       *     prompt_tokens: number
       *     // [required]
       *     completion_tokens: number
       *     // [required]
       *     total_tokens: number
       *   }
       * }
       * ```
       */
      post_v1_chat_completions<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          choices: Array<{
            index?: number;
            message?: {
              /**
               * [required]
               */
              role: string;
              /**
               * [required]
               */
              content: string;
            };
            finish_reason?: string;
          }>;
          /**
           * [required]
           */
          usage: {
            /**
             * [required]
             */
            prompt_tokens: number;
            /**
             * [required]
             */
            completion_tokens: number;
            /**
             * [required]
             */
            total_tokens: number;
          };
        }> & {
          data: {
            /**
             * 要使用的模型的 ID。有关哪些模型可与聊天 API 一起使用的详细信息,请参阅模型端点兼容性表。
             * [required]
             */
            model: string;
            /**
             * 至今为止对话所包含的消息列表。Python 代码示例。
             * [required]
             */
            messages: Array<{
              role?: string;
              content?: string;
            }>;
            /**
             * 使用什么采样温度，介于 0 和 2 之间。较高的值（如 0.8）将使输出更加随机，而较低的值（如 0.2）将使输出更加集中和确定。  我们通常建议改变这个或`top_p`但不是两者。
             */
            temperature?: number;
            /**
             * 一种替代温度采样的方法，称为核采样，其中模型考虑具有 top_p 概率质量的标记的结果。所以 0.1 意味着只考虑构成前 10% 概率质量的标记。  我们通常建议改变这个或`temperature`但不是两者。
             */
            top_p?: number;
            /**
             * 默认为 1
             * 为每个输入消息生成多少个聊天补全选择。
             */
            n?: number;
            /**
             * 默认为 false 如果设置,则像在 ChatGPT 中一样会发送部分消息增量。标记将以仅数据的服务器发送事件的形式发送,这些事件在可用时,并在 data: [DONE] 消息终止流。Python 代码示例。
             */
            stream?: boolean;
            /**
             * 默认为 null 最多 4 个序列,API 将停止进一步生成标记。
             */
            stop?: string;
            /**
             * 默认为 inf
             * 在聊天补全中生成的最大标记数。
             *
             * 输入标记和生成标记的总长度受模型的上下文长度限制。计算标记的 Python 代码示例。
             */
            max_tokens?: number;
            /**
             * -2.0 和 2.0 之间的数字。正值会根据到目前为止是否出现在文本中来惩罚新标记，从而增加模型谈论新主题的可能性。  [查看有关频率和存在惩罚的更多信息。](https://platform.openai.com/docs/api-reference/parameter-details)
             */
            presence_penalty?: number;
            /**
             * 默认为 0 -2.0 到 2.0 之间的数字。正值根据文本目前的存在频率惩罚新标记,降低模型重复相同行的可能性。  有关频率和存在惩罚的更多信息。
             */
            frequency_penalty?: number;
            /**
             * 修改指定标记出现在补全中的可能性。
             *
             * 接受一个 JSON 对象,该对象将标记(由标记器指定的标记 ID)映射到相关的偏差值(-100 到 100)。从数学上讲,偏差在对模型进行采样之前添加到模型生成的 logit 中。确切效果因模型而异,但-1 和 1 之间的值应减少或增加相关标记的选择可能性;如-100 或 100 这样的值应导致相关标记的禁用或独占选择。
             */
            logit_bias?: unknown | null;
            /**
             * 代表您的最终用户的唯一标识符，可以帮助 OpenAI 监控和检测滥用行为。[了解更多](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids)。
             */
            user?: string;
            /**
             * 指定模型必须输出的格式的对象。  将 { "type": "json_object" } 启用 JSON 模式,这可以确保模型生成的消息是有效的 JSON。  重要提示:使用 JSON 模式时,还必须通过系统或用户消息指示模型生成 JSON。如果不这样做,模型可能会生成无休止的空白流,直到生成达到令牌限制,从而导致延迟增加和请求“卡住”的外观。另请注意,如果 finish_reason="length",则消息内容可能会被部分切断,这表示生成超过了 max_tokens 或对话超过了最大上下文长度。  显示属性
             */
            response_format?: object;
            /**
             * 此功能处于测试阶段。如果指定,我们的系统将尽最大努力确定性地进行采样,以便使用相同的种子和参数进行重复请求应返回相同的结果。不能保证确定性,您应该参考 system_fingerprint 响应参数来监控后端的更改。
             */
            seen?: number;
            /**
             * 模型可以调用的一组工具列表。目前,只支持作为工具的函数。使用此功能来提供模型可以为之生成 JSON 输入的函数列表。
             * [required]
             */
            tools: string[];
            /**
             * 控制模型调用哪个函数(如果有的话)。none 表示模型不会调用函数,而是生成消息。auto 表示模型可以在生成消息和调用函数之间进行选择。通过 {"type": "function", "function": {"name": "my_function"}} 强制模型调用该函数。  如果没有函数存在,默认为 none。如果有函数存在,默认为 auto。  显示可能的类型
             * [required]
             */
            tool_choice: object;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          choices: Array<{
            index?: number;
            message?: {
              /**
               * [required]
               */
              role: string;
              /**
               * [required]
               */
              content: string;
            };
            finish_reason?: string;
          }>;
          /**
           * [required]
           */
          usage: {
            /**
             * [required]
             */
            prompt_tokens: number;
            /**
             * [required]
             */
            completion_tokens: number;
            /**
             * [required]
             */
            total_tokens: number;
          };
        },
        'general.post_v1_chat_completions',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建 Completions
       *
       * **path:** /v1/completions
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 要使用的模型的 ID。您可以使用[List models](https://platform.openai.com/docs/api-reference/models/list) API 来查看所有可用模型，或查看我们的[模型概述](https://platform.openai.com/docs/models/overview)以了解它们的描述。
       *   // [required]
       *   model: string
       *   // 生成完成的提示，编码为字符串、字符串数组、标记数组或标记数组数组。  请注意，<|endoftext|> 是模型在训练期间看到的文档分隔符，因此如果未指定提示，模型将生成新文档的开头。
       *   // [required]
       *   prompt: string
       *   // 默认为1 在服务器端生成best_of个补全,并返回“最佳”补全(每个令牌的日志概率最高的那个)。无法流式传输结果。  与n一起使用时,best_of控制候选补全的数量,n指定要返回的数量 – best_of必须大于n。  注意:因为这个参数会生成许多补全,所以它可以快速消耗您的令牌配额。请谨慎使用,并确保您对max_tokens和stop有合理的设置。
       *   best_of?: number
       *   // 默认为false 除了补全之外,还回显提示
       *   echo?: boolean
       *   // 默认为0 -2.0和2.0之间的数字。正值根据文本目前的现有频率处罚新令牌,降低模型逐字重复相同行的可能性。
       *   frequency_penalty?: number
       *   // 默认为null 修改完成中指定令牌出现的可能性。  接受一个JSON对象,该对象将令牌(由GPT令牌化器中的令牌ID指定)映射到关联偏差值,-100到100。您可以使用这个令牌化器工具(适用于GPT-2和GPT-3)将文本转换为令牌ID。从数学上讲,偏差在对模型进行采样之前添加到生成的logit中。确切效果因模型而异,但-1至1之间的值应降低或提高选择的可能性;像-100或100这样的值应导致相关令牌的禁用或专属选择。  例如,您可以传递{"50256": -100}来防止生成<|endoftext|>令牌。
       *   logit_bias?: object
       *   // 默认为null
       *   // 包括logprobs个最可能令牌的日志概率,以及所选令牌。例如,如果logprobs为5,API将返回5个最有可能令牌的列表。 API总会返回采样令牌的logprob,因此响应中最多可能有logprobs+1个元素。
       *   //
       *   // logprobs的最大值是5。
       *   logprobs?: unknown | null
       *   // 默认为16
       *   // 在补全中生成的最大令牌数。
       *   //
       *   // 提示的令牌计数加上max_tokens不能超过模型的上下文长度。 计数令牌的Python代码示例。
       *   max_tokens?: number
       *   // 默认为1
       *   // 为每个提示生成的补全数量。
       *   //
       *   // 注意:因为这个参数会生成许多补全,所以它可以快速消耗您的令牌配额。请谨慎使用,并确保您对max_tokens和stop有合理的设置。
       *   n?: number
       *   // 默认为0 -2.0和2.0之间的数字。正值根据它们是否出现在目前的文本中来惩罚新令牌,增加模型讨论新话题的可能性。  有关频率和存在惩罚的更多信息,请参阅。
       *   presence_penalty?: number
       *   // 如果指定,我们的系统将尽最大努力确定性地进行采样,以便使用相同的种子和参数的重复请求应返回相同的结果。  不保证确定性,您应该参考system_fingerprint响应参数来监视后端的更改。
       *   seed?: number
       *   // 默认为null 最多4个序列,API将停止在其中生成更多令牌。返回的文本不会包含停止序列。
       *   stop?: string
       *   // 默认为false 是否流回部分进度。如果设置,令牌将作为可用时发送为仅数据的服务器发送事件,流由数据 Terminated by a data: [DONE] message. 对象消息终止。 Python代码示例。
       *   stream?: boolean
       *   // 默认为null 在插入文本的补全之后出现的后缀。
       *   suffix?: string
       *   // 默认为1 要使用的采样温度,介于0和2之间。更高的值(如0.8)将使输出更随机,而更低的值(如0.2)将使其更集中和确定。  我们通常建议更改这个或top_p,而不是两者都更改。
       *   temperature?: number
       *   // [required]
       *   user: string
       *   // 表示最终用户的唯一标识符,这可以帮助OpenAI监控和检测滥用。 了解更多。
       *   top_p?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created: number
       *   // [required]
       *   model: string
       *   // [required]
       *   system_fingerprint: string
       *   // [required]
       *   choices: Array<{
       *     text?: string
       *     index?: number
       *     logprobs?: unknown | null
       *     finish_reason?: string
       *   }>
       *   // [required]
       *   usage: {
       *     // [required]
       *     prompt_tokens: number
       *     // [required]
       *     completion_tokens: number
       *     // [required]
       *     total_tokens: number
       *   }
       * }
       * ```
       */
      post_v1_completions<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          system_fingerprint: string;
          /**
           * [required]
           */
          choices: Array<{
            text?: string;
            index?: number;
            logprobs?: unknown | null;
            finish_reason?: string;
          }>;
          /**
           * [required]
           */
          usage: {
            /**
             * [required]
             */
            prompt_tokens: number;
            /**
             * [required]
             */
            completion_tokens: number;
            /**
             * [required]
             */
            total_tokens: number;
          };
        }> & {
          data: {
            /**
             * 要使用的模型的 ID。您可以使用[List models](https://platform.openai.com/docs/api-reference/models/list) API 来查看所有可用模型，或查看我们的[模型概述](https://platform.openai.com/docs/models/overview)以了解它们的描述。
             * [required]
             */
            model: string;
            /**
             * 生成完成的提示，编码为字符串、字符串数组、标记数组或标记数组数组。  请注意，<|endoftext|> 是模型在训练期间看到的文档分隔符，因此如果未指定提示，模型将生成新文档的开头。
             * [required]
             */
            prompt: string;
            /**
             * 默认为1 在服务器端生成best_of个补全,并返回“最佳”补全(每个令牌的日志概率最高的那个)。无法流式传输结果。  与n一起使用时,best_of控制候选补全的数量,n指定要返回的数量 – best_of必须大于n。  注意:因为这个参数会生成许多补全,所以它可以快速消耗您的令牌配额。请谨慎使用,并确保您对max_tokens和stop有合理的设置。
             */
            best_of?: number;
            /**
             * 默认为false 除了补全之外,还回显提示
             */
            echo?: boolean;
            /**
             * 默认为0 -2.0和2.0之间的数字。正值根据文本目前的现有频率处罚新令牌,降低模型逐字重复相同行的可能性。
             */
            frequency_penalty?: number;
            /**
             * 默认为null 修改完成中指定令牌出现的可能性。  接受一个JSON对象,该对象将令牌(由GPT令牌化器中的令牌ID指定)映射到关联偏差值,-100到100。您可以使用这个令牌化器工具(适用于GPT-2和GPT-3)将文本转换为令牌ID。从数学上讲,偏差在对模型进行采样之前添加到生成的logit中。确切效果因模型而异,但-1至1之间的值应降低或提高选择的可能性;像-100或100这样的值应导致相关令牌的禁用或专属选择。  例如,您可以传递{"50256": -100}来防止生成<|endoftext|>令牌。
             */
            logit_bias?: object;
            /**
             * 默认为null
             * 包括logprobs个最可能令牌的日志概率,以及所选令牌。例如,如果logprobs为5,API将返回5个最有可能令牌的列表。 API总会返回采样令牌的logprob,因此响应中最多可能有logprobs+1个元素。
             *
             * logprobs的最大值是5。
             */
            logprobs?: unknown | null;
            /**
             * 默认为16
             * 在补全中生成的最大令牌数。
             *
             * 提示的令牌计数加上max_tokens不能超过模型的上下文长度。 计数令牌的Python代码示例。
             */
            max_tokens?: number;
            /**
             * 默认为1
             * 为每个提示生成的补全数量。
             *
             * 注意:因为这个参数会生成许多补全,所以它可以快速消耗您的令牌配额。请谨慎使用,并确保您对max_tokens和stop有合理的设置。
             */
            n?: number;
            /**
             * 默认为0 -2.0和2.0之间的数字。正值根据它们是否出现在目前的文本中来惩罚新令牌,增加模型讨论新话题的可能性。  有关频率和存在惩罚的更多信息,请参阅。
             */
            presence_penalty?: number;
            /**
             * 如果指定,我们的系统将尽最大努力确定性地进行采样,以便使用相同的种子和参数的重复请求应返回相同的结果。  不保证确定性,您应该参考system_fingerprint响应参数来监视后端的更改。
             */
            seed?: number;
            /**
             * 默认为null 最多4个序列,API将停止在其中生成更多令牌。返回的文本不会包含停止序列。
             */
            stop?: string;
            /**
             * 默认为false 是否流回部分进度。如果设置,令牌将作为可用时发送为仅数据的服务器发送事件,流由数据 Terminated by a data: [DONE] message. 对象消息终止。 Python代码示例。
             */
            stream?: boolean;
            /**
             * 默认为null 在插入文本的补全之后出现的后缀。
             */
            suffix?: string;
            /**
             * 默认为1 要使用的采样温度,介于0和2之间。更高的值(如0.8)将使输出更随机,而更低的值(如0.2)将使其更集中和确定。  我们通常建议更改这个或top_p,而不是两者都更改。
             */
            temperature?: number;
            /**
             * [required]
             */
            user: string;
            /**
             * 表示最终用户的唯一标识符,这可以帮助OpenAI监控和检测滥用。 了解更多。
             */
            top_p?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          system_fingerprint: string;
          /**
           * [required]
           */
          choices: Array<{
            text?: string;
            index?: number;
            logprobs?: unknown | null;
            finish_reason?: string;
          }>;
          /**
           * [required]
           */
          usage: {
            /**
             * [required]
             */
            prompt_tokens: number;
            /**
             * [required]
             */
            completion_tokens: number;
            /**
             * [required]
             */
            total_tokens: number;
          };
        },
        'general.post_v1_completions',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建嵌入
       *
       * **path:** /v1/embeddings
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 要使用的模型的 ID。您可以使用[List models](https://platform.openai.com/docs/api-reference/models/list) API 来查看所有可用模型，或查看我们的[模型概述](https://platform.openai.com/docs/models/overview)以了解它们的描述。
       *   // [required]
       *   model: string
       *   // 输入文本以获取嵌入，编码为字符串或标记数组。要在单个请求中获取多个输入的嵌入，请传递一个字符串数组或令牌数组数组。每个输入的长度不得超过 8192 个标记。
       *   // [required]
       *   input: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   object: string
       *   // [required]
       *   data: Array<{
       *     object?: string
       *     embedding?: number[]
       *     index?: number
       *   }>
       *   // [required]
       *   model: string
       *   // [required]
       *   usage: {
       *     // [required]
       *     prompt_tokens: number
       *     // [required]
       *     total_tokens: number
       *   }
       * }
       * ```
       */
      post_v1_embeddings<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            object?: string;
            embedding?: number[];
            index?: number;
          }>;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          usage: {
            /**
             * [required]
             */
            prompt_tokens: number;
            /**
             * [required]
             */
            total_tokens: number;
          };
        }> & {
          data: {
            /**
             * 要使用的模型的 ID。您可以使用[List models](https://platform.openai.com/docs/api-reference/models/list) API 来查看所有可用模型，或查看我们的[模型概述](https://platform.openai.com/docs/models/overview)以了解它们的描述。
             * [required]
             */
            model: string;
            /**
             * 输入文本以获取嵌入，编码为字符串或标记数组。要在单个请求中获取多个输入的嵌入，请传递一个字符串数组或令牌数组数组。每个输入的长度不得超过 8192 个标记。
             * [required]
             */
            input: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            object?: string;
            embedding?: number[];
            index?: number;
          }>;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          usage: {
            /**
             * [required]
             */
            prompt_tokens: number;
            /**
             * [required]
             */
            total_tokens: number;
          };
        },
        'general.post_v1_embeddings',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建微调作业
       *
       * **path:** /v1/fine_tuning/jobs
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 包含训练数据的上传文件的 ID。  有关如何上传文件的信息，请参阅[上传文件。](https://platform.openai.com/docs/api-reference/files/upload)  您的数据集必须格式化为 JSONL 文件。此外，您必须上传带有目的的文件`fine-tune`。  有关更多详细信息，请参阅[微调指南。](https://platform.openai.com/docs/guides/fine-tuning)
       *   // [required]
       *   training_file: string
       *   // 要微调的模型的名称。您可以选择支持的模型之一。
       *   // [required]
       *   model: string
       *   // 用于微调工作的超参数。
       *   hyperparameters?: {
       *     // 每批中的示例数。批量大小越大意味着模型参数的更新频率越低，但方差越小。
       *     batch_size?: string
       *     // 学习率的比例因子。较小的学习率可能有助于避免过度拟合。
       *     learning_rate_multiplier?: string
       *     // 训练模型的纪元数。一个纪元是指训练数据集的一个完整周期。
       *     n_epochs?: string
       *   }
       *   // 最多 18 个字符的字符串，将添加到您的微调模型名称中。  例如，`suffix`“custom-model-name”的 a 将生成类似 的模型名称`ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`。
       *   // [required]
       *   suffix: string
       *   // 如果您提供此文件，则数据将用于在微调期间定期生成验证指标。这些指标可以在微调结果文件中查看。相同的数据不应同时出现在训练文件和验证文件中。  您的数据集必须格式化为 JSONL 文件。您必须以特定目的上传文件`fine-tune`。  有关更多详细信息，请参阅[微调指南。](https://platform.openai.com/docs/guides/fine-tuning)
       *   // [required]
       *   validation_file: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 对象类型,总是为"fine_tuning.job"
       *   // [required]
       *   object: string
       *   // 对象标识符,可以在API端点中引用
       *   // [required]
       *   id: string
       *   // 被微调的基础模型
       *   // [required]
       *   model: string
       *   // 创建微调作业的Unix时间戳(秒)
       *   // [required]
       *   created_at: number
       *   // 正在创建的微调模型的名称。如果微调作业仍在运行,则值为null
       *   // [required]
       *   fine_tuned_model: unknown | null
       *   // 拥有微调作业的组织
       *   // [required]
       *   organization_id: string
       *   // 微调作业的编译结果文件ID。可以使用文件API检索结果
       *   // [required]
       *   result_files: string[]
       *   // 微调作业的当前状态,可以是validating_files、queued、running、succeeded、failed或cancelled
       *   // [required]
       *   status: string
       *   // 用于验证的文件ID。可以使用文件API检索验证结果
       *   // [required]
       *   validation_file: unknown | null
       *   // 用于训练的文件ID。可以使用文件API检索训练数据
       *   // [required]
       *   training_file: string
       * }
       * ```
       */
      post_v1_fine_tuning_jobs<
        Config extends Alova2MethodConfig<{
          /**
           * 对象类型,总是为"fine_tuning.job"
           * [required]
           */
          object: string;
          /**
           * 对象标识符,可以在API端点中引用
           * [required]
           */
          id: string;
          /**
           * 被微调的基础模型
           * [required]
           */
          model: string;
          /**
           * 创建微调作业的Unix时间戳(秒)
           * [required]
           */
          created_at: number;
          /**
           * 正在创建的微调模型的名称。如果微调作业仍在运行,则值为null
           * [required]
           */
          fine_tuned_model: unknown | null;
          /**
           * 拥有微调作业的组织
           * [required]
           */
          organization_id: string;
          /**
           * 微调作业的编译结果文件ID。可以使用文件API检索结果
           * [required]
           */
          result_files: string[];
          /**
           * 微调作业的当前状态,可以是validating_files、queued、running、succeeded、failed或cancelled
           * [required]
           */
          status: string;
          /**
           * 用于验证的文件ID。可以使用文件API检索验证结果
           * [required]
           */
          validation_file: unknown | null;
          /**
           * 用于训练的文件ID。可以使用文件API检索训练数据
           * [required]
           */
          training_file: string;
        }> & {
          data: {
            /**
             * 包含训练数据的上传文件的 ID。  有关如何上传文件的信息，请参阅[上传文件。](https://platform.openai.com/docs/api-reference/files/upload)  您的数据集必须格式化为 JSONL 文件。此外，您必须上传带有目的的文件`fine-tune`。  有关更多详细信息，请参阅[微调指南。](https://platform.openai.com/docs/guides/fine-tuning)
             * [required]
             */
            training_file: string;
            /**
             * 要微调的模型的名称。您可以选择支持的模型之一。
             * [required]
             */
            model: string;
            /**
             * 用于微调工作的超参数。
             */
            hyperparameters?: {
              /**
               * 每批中的示例数。批量大小越大意味着模型参数的更新频率越低，但方差越小。
               */
              batch_size?: string;
              /**
               * 学习率的比例因子。较小的学习率可能有助于避免过度拟合。
               */
              learning_rate_multiplier?: string;
              /**
               * 训练模型的纪元数。一个纪元是指训练数据集的一个完整周期。
               */
              n_epochs?: string;
            };
            /**
             * 最多 18 个字符的字符串，将添加到您的微调模型名称中。  例如，`suffix`“custom-model-name”的 a 将生成类似 的模型名称`ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`。
             * [required]
             */
            suffix: string;
            /**
             * 如果您提供此文件，则数据将用于在微调期间定期生成验证指标。这些指标可以在微调结果文件中查看。相同的数据不应同时出现在训练文件和验证文件中。  您的数据集必须格式化为 JSONL 文件。您必须以特定目的上传文件`fine-tune`。  有关更多详细信息，请参阅[微调指南。](https://platform.openai.com/docs/guides/fine-tuning)
             * [required]
             */
            validation_file: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * 对象类型,总是为"fine_tuning.job"
           * [required]
           */
          object: string;
          /**
           * 对象标识符,可以在API端点中引用
           * [required]
           */
          id: string;
          /**
           * 被微调的基础模型
           * [required]
           */
          model: string;
          /**
           * 创建微调作业的Unix时间戳(秒)
           * [required]
           */
          created_at: number;
          /**
           * 正在创建的微调模型的名称。如果微调作业仍在运行,则值为null
           * [required]
           */
          fine_tuned_model: unknown | null;
          /**
           * 拥有微调作业的组织
           * [required]
           */
          organization_id: string;
          /**
           * 微调作业的编译结果文件ID。可以使用文件API检索结果
           * [required]
           */
          result_files: string[];
          /**
           * 微调作业的当前状态,可以是validating_files、queued、running、succeeded、failed或cancelled
           * [required]
           */
          status: string;
          /**
           * 用于验证的文件ID。可以使用文件API检索验证结果
           * [required]
           */
          validation_file: unknown | null;
          /**
           * 用于训练的文件ID。可以使用文件API检索训练数据
           * [required]
           */
          training_file: string;
        },
        'general.post_v1_fine_tuning_jobs',
        Config
      >;
      /**
       * ---
       *
       * [GET] 列出微调作业
       *
       * **path:** /v1/fine_tuning/jobs
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 上一个分页请求中最后一个作业的标识符。
       *   after?: number
       *   // 要检索的微调作业的数量。
       *   limit?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 对象类型,总是为"fine_tuning.job"
       *   // [required]
       *   object: string
       *   // [required]
       *   data: Array<{
       *     object?: string
       *     id?: string
       *     created_at?: number
       *     level?: string
       *     message?: string
       *     data?: unknown | null
       *     type?: string
       *   }>
       *   // [required]
       *   has_more: boolean
       * }
       * ```
       */
      get_v1_fine_tuning_jobs<
        Config extends Alova2MethodConfig<{
          /**
           * 对象类型,总是为"fine_tuning.job"
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            object?: string;
            id?: string;
            created_at?: number;
            level?: string;
            message?: string;
            data?: unknown | null;
            type?: string;
          }>;
          /**
           * [required]
           */
          has_more: boolean;
        }> & {
          params: {
            /**
             * 上一个分页请求中最后一个作业的标识符。
             */
            after?: number;
            /**
             * 要检索的微调作业的数量。
             */
            limit?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * 对象类型,总是为"fine_tuning.job"
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            object?: string;
            id?: string;
            created_at?: number;
            level?: string;
            message?: string;
            data?: unknown | null;
            type?: string;
          }>;
          /**
           * [required]
           */
          has_more: boolean;
        },
        'general.get_v1_fine_tuning_jobs',
        Config
      >;
      /**
       * ---
       *
       * [GET] 检索微调作业
       *
       * **path:** /v1/fine_tuning/jobs/{fine_tuning_job_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 微调作业的 ID。
       *   // [required]
       *   fine_tuning_job_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 对象类型,总是为"fine_tuning.job"
       *   // [required]
       *   object: string
       *   // 对象标识符,可以在API端点中引用
       *   // [required]
       *   id: string
       *   // 被微调的基础模型
       *   // [required]
       *   model: string
       *   // 创建微调作业的Unix时间戳(秒)
       *   // [required]
       *   created_at: number
       *   // 微调作业完成的Unix时间戳(秒)。如果微调作业仍在运行,则值为null
       *   // [required]
       *   finished_at: number
       *   // 正在创建的微调模型的名称。如果微调作业仍在运行,则值为null
       *   // [required]
       *   fine_tuned_model: string
       *   // 拥有微调作业的组织
       *   // [required]
       *   organization_id: string
       *   // 微调作业的编译结果文件ID。可以使用文件API检索结果
       *   // [required]
       *   result_files: string[]
       *   // 微调作业的当前状态,可以是validating_files、queued、running、succeeded、failed或cancelled
       *   // [required]
       *   status: string
       *   // 用于验证的文件ID。可以使用文件API检索验证结果
       *   // [required]
       *   validation_file: unknown | null
       *   // 用于训练的文件ID。可以使用文件API检索训练数据
       *   // [required]
       *   training_file: string
       *   // 微调作业使用的超参数。更多详细信息请参阅微调指南
       *   // [required]
       *   hyperparameters: {
       *     // [required]
       *     n_epochs: number
       *   }
       *   // 此微调作业处理的计费标记总数。如果微调作业仍在运行,则值为null
       *   // [required]
       *   trained_tokens: number
       * }
       * ```
       */
      get_v1_fine_tuning_jobs_fine_tuning_job_id<
        Config extends Alova2MethodConfig<{
          /**
           * 对象类型,总是为"fine_tuning.job"
           * [required]
           */
          object: string;
          /**
           * 对象标识符,可以在API端点中引用
           * [required]
           */
          id: string;
          /**
           * 被微调的基础模型
           * [required]
           */
          model: string;
          /**
           * 创建微调作业的Unix时间戳(秒)
           * [required]
           */
          created_at: number;
          /**
           * 微调作业完成的Unix时间戳(秒)。如果微调作业仍在运行,则值为null
           * [required]
           */
          finished_at: number;
          /**
           * 正在创建的微调模型的名称。如果微调作业仍在运行,则值为null
           * [required]
           */
          fine_tuned_model: string;
          /**
           * 拥有微调作业的组织
           * [required]
           */
          organization_id: string;
          /**
           * 微调作业的编译结果文件ID。可以使用文件API检索结果
           * [required]
           */
          result_files: string[];
          /**
           * 微调作业的当前状态,可以是validating_files、queued、running、succeeded、failed或cancelled
           * [required]
           */
          status: string;
          /**
           * 用于验证的文件ID。可以使用文件API检索验证结果
           * [required]
           */
          validation_file: unknown | null;
          /**
           * 用于训练的文件ID。可以使用文件API检索训练数据
           * [required]
           */
          training_file: string;
          /**
           * 微调作业使用的超参数。更多详细信息请参阅微调指南
           * [required]
           */
          hyperparameters: {
            /**
             * [required]
             */
            n_epochs: number;
          };
          /**
           * 此微调作业处理的计费标记总数。如果微调作业仍在运行,则值为null
           * [required]
           */
          trained_tokens: number;
        }> & {
          pathParams: {
            /**
             * 微调作业的 ID。
             * [required]
             */
            fine_tuning_job_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * 对象类型,总是为"fine_tuning.job"
           * [required]
           */
          object: string;
          /**
           * 对象标识符,可以在API端点中引用
           * [required]
           */
          id: string;
          /**
           * 被微调的基础模型
           * [required]
           */
          model: string;
          /**
           * 创建微调作业的Unix时间戳(秒)
           * [required]
           */
          created_at: number;
          /**
           * 微调作业完成的Unix时间戳(秒)。如果微调作业仍在运行,则值为null
           * [required]
           */
          finished_at: number;
          /**
           * 正在创建的微调模型的名称。如果微调作业仍在运行,则值为null
           * [required]
           */
          fine_tuned_model: string;
          /**
           * 拥有微调作业的组织
           * [required]
           */
          organization_id: string;
          /**
           * 微调作业的编译结果文件ID。可以使用文件API检索结果
           * [required]
           */
          result_files: string[];
          /**
           * 微调作业的当前状态,可以是validating_files、queued、running、succeeded、failed或cancelled
           * [required]
           */
          status: string;
          /**
           * 用于验证的文件ID。可以使用文件API检索验证结果
           * [required]
           */
          validation_file: unknown | null;
          /**
           * 用于训练的文件ID。可以使用文件API检索训练数据
           * [required]
           */
          training_file: string;
          /**
           * 微调作业使用的超参数。更多详细信息请参阅微调指南
           * [required]
           */
          hyperparameters: {
            /**
             * [required]
             */
            n_epochs: number;
          };
          /**
           * 此微调作业处理的计费标记总数。如果微调作业仍在运行,则值为null
           * [required]
           */
          trained_tokens: number;
        },
        'general.get_v1_fine_tuning_jobs_fine_tuning_job_id',
        Config
      >;
      /**
       * ---
       *
       * [POST] 取消微调
       *
       * **path:** /v1/fine_tuning/jobs/{fine_tuning_job_id}/cancel
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 要取消的微调作业的 ID。
       *   // [required]
       *   fine_tuning_job_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 对象类型,总是为"fine_tuning.job"
       *   // [required]
       *   object: string
       *   // 对象标识符,可以在API端点中引用
       *   // [required]
       *   id: string
       *   // 被微调的基础模型
       *   // [required]
       *   model: string
       *   // 创建微调作业的Unix时间戳(秒)
       *   // [required]
       *   created_at: number
       *   // 正在创建的微调模型的名称。如果微调作业仍在运行,则值为null
       *   // [required]
       *   fine_tuned_model: unknown | null
       *   // 拥有微调作业的组织
       *   // [required]
       *   organization_id: string
       *   // 微调作业的编译结果文件ID。可以使用文件API检索结果
       *   // [required]
       *   result_files: string[]
       *   // 微调作业使用的超参数。更多详细信息请参阅微调指南
       *   // [required]
       *   hyperparameters: {
       *     // [required]
       *     n_epochs: string
       *   }
       *   // 微调作业的当前状态,可以是validating_files、queued、running、succeeded、failed或cancelled
       *   // [required]
       *   status: string
       *   // 用于验证的文件ID。可以使用文件API检索验证结果
       *   // [required]
       *   validation_file: string
       *   // 用于训练的文件ID。可以使用文件API检索训练数据
       *   // [required]
       *   training_file: string
       * }
       * ```
       */
      post_v1_fine_tuning_jobs_fine_tuning_job_id_cancel<
        Config extends Alova2MethodConfig<{
          /**
           * 对象类型,总是为"fine_tuning.job"
           * [required]
           */
          object: string;
          /**
           * 对象标识符,可以在API端点中引用
           * [required]
           */
          id: string;
          /**
           * 被微调的基础模型
           * [required]
           */
          model: string;
          /**
           * 创建微调作业的Unix时间戳(秒)
           * [required]
           */
          created_at: number;
          /**
           * 正在创建的微调模型的名称。如果微调作业仍在运行,则值为null
           * [required]
           */
          fine_tuned_model: unknown | null;
          /**
           * 拥有微调作业的组织
           * [required]
           */
          organization_id: string;
          /**
           * 微调作业的编译结果文件ID。可以使用文件API检索结果
           * [required]
           */
          result_files: string[];
          /**
           * 微调作业使用的超参数。更多详细信息请参阅微调指南
           * [required]
           */
          hyperparameters: {
            /**
             * [required]
             */
            n_epochs: string;
          };
          /**
           * 微调作业的当前状态,可以是validating_files、queued、running、succeeded、failed或cancelled
           * [required]
           */
          status: string;
          /**
           * 用于验证的文件ID。可以使用文件API检索验证结果
           * [required]
           */
          validation_file: string;
          /**
           * 用于训练的文件ID。可以使用文件API检索训练数据
           * [required]
           */
          training_file: string;
        }> & {
          pathParams: {
            /**
             * 要取消的微调作业的 ID。
             * [required]
             */
            fine_tuning_job_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * 对象类型,总是为"fine_tuning.job"
           * [required]
           */
          object: string;
          /**
           * 对象标识符,可以在API端点中引用
           * [required]
           */
          id: string;
          /**
           * 被微调的基础模型
           * [required]
           */
          model: string;
          /**
           * 创建微调作业的Unix时间戳(秒)
           * [required]
           */
          created_at: number;
          /**
           * 正在创建的微调模型的名称。如果微调作业仍在运行,则值为null
           * [required]
           */
          fine_tuned_model: unknown | null;
          /**
           * 拥有微调作业的组织
           * [required]
           */
          organization_id: string;
          /**
           * 微调作业的编译结果文件ID。可以使用文件API检索结果
           * [required]
           */
          result_files: string[];
          /**
           * 微调作业使用的超参数。更多详细信息请参阅微调指南
           * [required]
           */
          hyperparameters: {
            /**
             * [required]
             */
            n_epochs: string;
          };
          /**
           * 微调作业的当前状态,可以是validating_files、queued、running、succeeded、failed或cancelled
           * [required]
           */
          status: string;
          /**
           * 用于验证的文件ID。可以使用文件API检索验证结果
           * [required]
           */
          validation_file: string;
          /**
           * 用于训练的文件ID。可以使用文件API检索训练数据
           * [required]
           */
          training_file: string;
        },
        'general.post_v1_fine_tuning_jobs_fine_tuning_job_id_cancel',
        Config
      >;
      /**
       * ---
       *
       * [GET] 列出微调事件
       *
       * **path:** /v1/fine_tuning/jobs/{fine_tuning_job_id}/events
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 要为其获取事件的微调作业的 ID。
       *   // [required]
       *   fine_tuning_job_id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 上一个分页请求中最后一个事件的标识符。
       *   after?: string
       *   // 要检索的事件数。
       *   limit?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 对象类型,总是为"fine_tuning.job"
       *   // [required]
       *   object: string
       *   // [required]
       *   data: Array<{
       *     // [required]
       *     object: string
       *     // [required]
       *     id: string
       *     // [required]
       *     created_at: number
       *     // [required]
       *     level: string
       *     // [required]
       *     message: string
       *     // [required]
       *     data: unknown | null
       *     // [required]
       *     type: string
       *   }>
       *   // [required]
       *   has_more: boolean
       * }
       * ```
       */
      get_v1_fine_tuning_jobs_fine_tuning_job_id_events<
        Config extends Alova2MethodConfig<{
          /**
           * 对象类型,总是为"fine_tuning.job"
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            level: string;
            /**
             * [required]
             */
            message: string;
            /**
             * [required]
             */
            data: unknown | null;
            /**
             * [required]
             */
            type: string;
          }>;
          /**
           * [required]
           */
          has_more: boolean;
        }> & {
          pathParams: {
            /**
             * 要为其获取事件的微调作业的 ID。
             * [required]
             */
            fine_tuning_job_id: string;
          };
          params: {
            /**
             * 上一个分页请求中最后一个事件的标识符。
             */
            after?: string;
            /**
             * 要检索的事件数。
             */
            limit?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * 对象类型,总是为"fine_tuning.job"
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            level: string;
            /**
             * [required]
             */
            message: string;
            /**
             * [required]
             */
            data: unknown | null;
            /**
             * [required]
             */
            type: string;
          }>;
          /**
           * [required]
           */
          has_more: boolean;
        },
        'general.get_v1_fine_tuning_jobs_fine_tuning_job_id_events',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建图像
       *
       * **path:** /v1/images/generations
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 所需图像的文本描述。最大长度为 1000 个字符。
       *   // [required]
       *   prompt: string
       *   // 用于图像生成的模型。
       *   model?: string
       *   // 要生成的图像数。必须介于 1 和 10 之间。
       *   n?: number
       *   // 将生成的图像的质量。`hd`创建具有更精细细节和更高一致性的图像。此参数仅支持`dall-e-3`.
       *   quality?: string
       *   // 返回生成的图像的格式。必须是 或url之一b64_json。
       *   response_format?: string
       *   // 生成图像的大小。必须是`256x256`、`512x512`或`1024x1024`for之一`dall-e-2`。对于模型来说，必须是`1024x1024`、`1792x1024`、 或之一。`1024x1792``dall-e-3`
       *   style?: string
       *   // 生成图像的风格。必须是 或`vivid`之一`natural`。生动使模型倾向于生成超真实和戏剧性的图像。自然使模型生成更自然、不太真实的图像。此参数仅支持`dall-e-3`.
       *   user?: string
       *   // 生成图像的大小。必须是256x256、512x512或 1024x1024之一。
       *   size?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   created: number
       *   // [required]
       *   data: Array<{
       *     // [required]
       *     url: string
       *   }>
       * }
       * ```
       */
      post_v1_images_generations<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            url: string;
          }>;
        }> & {
          data: {
            /**
             * 所需图像的文本描述。最大长度为 1000 个字符。
             * [required]
             */
            prompt: string;
            /**
             * 用于图像生成的模型。
             */
            model?: string;
            /**
             * 要生成的图像数。必须介于 1 和 10 之间。
             */
            n?: number;
            /**
             * 将生成的图像的质量。`hd`创建具有更精细细节和更高一致性的图像。此参数仅支持`dall-e-3`.
             */
            quality?: string;
            /**
             * 返回生成的图像的格式。必须是 或url之一b64_json。
             */
            response_format?: string;
            /**
             * 生成图像的大小。必须是`256x256`、`512x512`或`1024x1024`for之一`dall-e-2`。对于模型来说，必须是`1024x1024`、`1792x1024`、 或之一。`1024x1792``dall-e-3`
             */
            style?: string;
            /**
             * 生成图像的风格。必须是 或`vivid`之一`natural`。生动使模型倾向于生成超真实和戏剧性的图像。自然使模型生成更自然、不太真实的图像。此参数仅支持`dall-e-3`.
             */
            user?: string;
            /**
             * 生成图像的大小。必须是256x256、512x512或 1024x1024之一。
             */
            size?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            url: string;
          }>;
        },
        'general.post_v1_images_generations',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建图片编辑
       *
       * **path:** /v1/images/edits
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 要编辑的图像。必须是有效的 PNG 文件，小于 4MB，并且是方形的。如果未提供遮罩，图像必须具有透明度，将用作遮罩。
       *   // [required]
       *   image: Blob
       *   // 附加图像，其完全透明区域（例如，alpha 为零的区域）指示image应编辑的位置。必须是有效的 PNG 文件，小于 4MB，并且尺寸与原始image相同。
       *   mask?: Blob
       *   // 所需图像的文本描述。最大长度为 1000 个字符。
       *   // [required]
       *   prompt: string
       *   // 要生成的图像数。必须介于 1 和 10 之间。
       *   n?: string
       *   // 生成图像的大小。必须是`256x256`、`512x512`或 `1024x1024`之一。
       *   size?: string
       *   // 生成的图像返回的格式。必须是`url`或`b64_json`。
       *   response_format?: string
       *   // 代表您的最终用户的唯一标识符，可以帮助 OpenAI 监控和检测滥用行为。[了解更多](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids)。
       *   user?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   created: number
       *   // [required]
       *   data: Array<{
       *     // [required]
       *     url: string
       *   }>
       * }
       * ```
       */
      post_v1_images_edits<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            url: string;
          }>;
        }> & {
          data: {
            /**
             * 要编辑的图像。必须是有效的 PNG 文件，小于 4MB，并且是方形的。如果未提供遮罩，图像必须具有透明度，将用作遮罩。
             * [required]
             */
            image: Blob;
            /**
             * 附加图像，其完全透明区域（例如，alpha 为零的区域）指示image应编辑的位置。必须是有效的 PNG 文件，小于 4MB，并且尺寸与原始image相同。
             */
            mask?: Blob;
            /**
             * 所需图像的文本描述。最大长度为 1000 个字符。
             * [required]
             */
            prompt: string;
            /**
             * 要生成的图像数。必须介于 1 和 10 之间。
             */
            n?: string;
            /**
             * 生成图像的大小。必须是`256x256`、`512x512`或 `1024x1024`之一。
             */
            size?: string;
            /**
             * 生成的图像返回的格式。必须是`url`或`b64_json`。
             */
            response_format?: string;
            /**
             * 代表您的最终用户的唯一标识符，可以帮助 OpenAI 监控和检测滥用行为。[了解更多](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids)。
             */
            user?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            url: string;
          }>;
        },
        'general.post_v1_images_edits',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建图像变体
       *
       * **path:** /v1/images/variations
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 用作变体基础的图像。必须是有效的 PNG 文件，小于 4MB，并且是方形的。
       *   // [required]
       *   image: Blob
       *   // 要生成的图像数。必须介于 1 和 10 之间。
       *   n?: string
       *   // 生成图像的大小。必须是`256x256`、`512x512`或 之一`1024x1024`。
       *   size?: string
       *   // 生成的图像返回的格式。必须是 或`url`之一`b64_json`。
       *   response_format?: string
       *   // 代表您的最终用户的唯一标识符，可以帮助 OpenAI 监控和检测滥用行为。[了解更多](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids)。
       *   user?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   created: number
       *   // [required]
       *   data: Array<{
       *     // [required]
       *     url: string
       *   }>
       * }
       * ```
       */
      post_v1_images_variations<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            url: string;
          }>;
        }> & {
          data: {
            /**
             * 用作变体基础的图像。必须是有效的 PNG 文件，小于 4MB，并且是方形的。
             * [required]
             */
            image: Blob;
            /**
             * 要生成的图像数。必须介于 1 和 10 之间。
             */
            n?: string;
            /**
             * 生成图像的大小。必须是`256x256`、`512x512`或 之一`1024x1024`。
             */
            size?: string;
            /**
             * 生成的图像返回的格式。必须是 或`url`之一`b64_json`。
             */
            response_format?: string;
            /**
             * 代表您的最终用户的唯一标识符，可以帮助 OpenAI 监控和检测滥用行为。[了解更多](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids)。
             */
            user?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            url: string;
          }>;
        },
        'general.post_v1_images_variations',
        Config
      >;
      /**
       * ---
       *
       * [GET] 列出模型
       *
       * **path:** /v1/models
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   object: string
       *   // [required]
       *   data: Array<{
       *     // [required]
       *     id: string
       *     // [required]
       *     object: string
       *     // [required]
       *     created: number
       *     // [required]
       *     owned_by: string
       *   }>
       * }
       * ```
       */
      get_v1_models<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created: number;
            /**
             * [required]
             */
            owned_by: string;
          }>;
        }>
      >(
        config?: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created: number;
            /**
             * [required]
             */
            owned_by: string;
          }>;
        },
        'general.get_v1_models',
        Config
      >;
      /**
       * ---
       *
       * [GET] 检索模型
       *
       * **path:** /v1/models/{modelid}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 用于此请求的模型的 ID
       *   // [required]
       *   modelid: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created: number
       *   // [required]
       *   owned_by: string
       * }
       * ```
       */
      get_v1_models_modelid<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          owned_by: string;
        }> & {
          pathParams: {
            /**
             * 用于此请求的模型的 ID
             * [required]
             */
            modelid: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created: number;
          /**
           * [required]
           */
          owned_by: string;
        },
        'general.get_v1_models_modelid',
        Config
      >;
      /**
       * ---
       *
       * [GET] 删除微调模型
       *
       * **path:** /v1/models/{model}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 要删除的模型
       *   // [required]
       *   model: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   deleted: boolean
       * }
       * ```
       */
      get_v1_models_model<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          deleted: boolean;
        }> & {
          pathParams: {
            /**
             * 要删除的模型
             * [required]
             */
            model: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          deleted: boolean;
        },
        'general.get_v1_models_model',
        Config
      >;
      /**
       * ---
       *
       * [POST] 上传文件
       *
       * **path:** /v1/files
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 要上传的[JSONL](https://jsonlines.readthedocs.io/en/latest/)文件的名称。
       *   //
       *   // 如果`purpose`设置为“微调”，则每一行都是一个 JSON 记录，其中包含代表您的[训练示例](https://platform.openai.com/docs/guides/fine-tuning/prepare-training-data)的“提示”和“完成”字段。
       *   // [required]
       *   file: Blob
       *   // 上传文件的预期目的。
       *   //
       *   // 使用“fine-tune”进行[微调](https://platform.openai.com/docs/api-reference/fine-tuning)，使用“assistants”进行[助手](https://platform.openai.com/docs/api-reference/assistants)和[消息](https://platform.openai.com/docs/api-reference/messages)。这使我们能够验证上传文件的格式是否正确以进行微调。
       *   // [required]
       *   purpose: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   bytes: number
       *   // [required]
       *   created_at: number
       *   // [required]
       *   filename: string
       *   // [required]
       *   purpose: string
       * }
       * ```
       */
      post_v1_files<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          bytes: number;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          filename: string;
          /**
           * [required]
           */
          purpose: string;
        }> & {
          data: {
            /**
             * 要上传的[JSONL](https://jsonlines.readthedocs.io/en/latest/)文件的名称。
             *
             * 如果`purpose`设置为“微调”，则每一行都是一个 JSON 记录，其中包含代表您的[训练示例](https://platform.openai.com/docs/guides/fine-tuning/prepare-training-data)的“提示”和“完成”字段。
             * [required]
             */
            file: Blob;
            /**
             * 上传文件的预期目的。
             *
             * 使用“fine-tune”进行[微调](https://platform.openai.com/docs/api-reference/fine-tuning)，使用“assistants”进行[助手](https://platform.openai.com/docs/api-reference/assistants)和[消息](https://platform.openai.com/docs/api-reference/messages)。这使我们能够验证上传文件的格式是否正确以进行微调。
             * [required]
             */
            purpose: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          bytes: number;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          filename: string;
          /**
           * [required]
           */
          purpose: string;
        },
        'general.post_v1_files',
        Config
      >;
      /**
       * ---
       *
       * [GET] 列出文件
       *
       * **path:** /v1/files
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // Only return files with the given purpose.
       *   purpose?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   data: Array<{
       *     // [required]
       *     id: string
       *     // [required]
       *     object: string
       *     // [required]
       *     bytes: number
       *     // [required]
       *     created_at: number
       *     // [required]
       *     filename: string
       *     // [required]
       *     purpose: string
       *   }>
       *   // [required]
       *   object: string
       * }
       * ```
       */
      get_v1_files<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            bytes: number;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            filename: string;
            /**
             * [required]
             */
            purpose: string;
          }>;
          /**
           * [required]
           */
          object: string;
        }> & {
          params: {
            /**
             * Only return files with the given purpose.
             */
            purpose?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            bytes: number;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            filename: string;
            /**
             * [required]
             */
            purpose: string;
          }>;
          /**
           * [required]
           */
          object: string;
        },
        'general.get_v1_files',
        Config
      >;
      /**
       * ---
       *
       * [DELETE] 删除文件
       *
       * **path:** /v1/files/{file_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 用于此请求的文件的 ID。
       *   // [required]
       *   file_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   deleted: boolean
       * }
       * ```
       */
      delete_v1_files_file_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          deleted: boolean;
        }> & {
          pathParams: {
            /**
             * 用于此请求的文件的 ID。
             * [required]
             */
            file_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          deleted: boolean;
        },
        'general.delete_v1_files_file_id',
        Config
      >;
      /**
       * ---
       *
       * [GET] 检索文件
       *
       * **path:** /v1/files/{file_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 用于此请求的文件的 ID。
       *   // [required]
       *   file_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   bytes: number
       *   // [required]
       *   created_at: number
       *   // [required]
       *   filename: string
       *   // [required]
       *   purpose: string
       * }
       * ```
       */
      get_v1_files_file_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          bytes: number;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          filename: string;
          /**
           * [required]
           */
          purpose: string;
        }> & {
          pathParams: {
            /**
             * 用于此请求的文件的 ID。
             * [required]
             */
            file_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          bytes: number;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          filename: string;
          /**
           * [required]
           */
          purpose: string;
        },
        'general.get_v1_files_file_id',
        Config
      >;
      /**
       * ---
       *
       * [GET] 检索文件内容
       *
       * **path:** /v1/files/{file_id}/content
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 用于此请求的文件的 ID。
       *   // [required]
       *   file_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = object
       * ```
       */
      get_v1_files_file_id_content<
        Config extends Alova2MethodConfig<object> & {
          pathParams: {
            /**
             * 用于此请求的文件的 ID。
             * [required]
             */
            file_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<object, 'general.get_v1_files_file_id_content', Config>;
      /**
       * ---
       *
       * [POST] 创建内容审核
       *
       * **path:** /v1/moderations
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 要分类的输入文本
       *   // [required]
       *   input: string
       *   // 有两种内容审核模型可用：`text-moderation-stable`和`text-moderation-latest`。  默认值`text-moderation-latest`将随着时间的推移自动升级。这可确保您始终使用我们最准确的模型。如果您使用`text-moderation-stable`，我们将在更新模型之前提供提前通知。的准确度`text-moderation-stable`可能略低于 的准确度`text-moderation-latest`。
       *   // [required]
       *   model: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 审核任务的唯一标识符
       *   // [required]
       *   id: string
       *   // 用于审核的模型
       *   // [required]
       *   model: string
       *   // 审核结果的详细信息
       *   // [required]
       *   results: Array<{
       *     // 审核模型检测到的所有分类标签
       *     categories?: {
       *       // 审核模型检测到是否存在仇恨言论
       *       // [required]
       *       hate: boolean
       *       // [required]
       *       'hate/threatening': boolean
       *       // 审核模型检测到是否存在自残内容
       *       // [required]
       *       'self-harm': boolean
       *       // 审核模型检测到是否存在性内容
       *       // [required]
       *       sexual: boolean
       *       // [required]
       *       'sexual/minors': boolean
       *       // 审核模型检测到是否存在暴力内容
       *       // [required]
       *       violence: boolean
       *       // [required]
       *       'violence/graphic': boolean
       *     }
       *     // 审核模型对所有分类标签的得分
       *     type_scores?: {
       *       // 审核模型对仇恨言论的得分
       *       // [required]
       *       hate: number
       *       // [required]
       *       'hate/threatening': number
       *       // 审核模型对自残内容的得分
       *       // [required]
       *       'self-harm': number
       *       // 审核模型对性内容的得分
       *       // [required]
       *       sexual: number
       *       // [required]
       *       'sexual/minors': number
       *       // 审核模型对暴力内容的得分
       *       // [required]
       *       violence: number
       *       // [required]
       *       'violence/graphic': number
       *     }
       *     // 审核模型是否将输入内容标记为可疑内容
       *     flagged?: boolean
       *   }>
       * }
       * ```
       */
      post_v1_moderations<
        Config extends Alova2MethodConfig<{
          /**
           * 审核任务的唯一标识符
           * [required]
           */
          id: string;
          /**
           * 用于审核的模型
           * [required]
           */
          model: string;
          /**
           * 审核结果的详细信息
           * [required]
           */
          results: Array<{
            /**
             * 审核模型检测到的所有分类标签
             */
            categories?: {
              /**
               * 审核模型检测到是否存在仇恨言论
               * [required]
               */
              hate: boolean;
              /**
               * [required]
               */
              'hate/threatening': boolean;
              /**
               * 审核模型检测到是否存在自残内容
               * [required]
               */
              'self-harm': boolean;
              /**
               * 审核模型检测到是否存在性内容
               * [required]
               */
              sexual: boolean;
              /**
               * [required]
               */
              'sexual/minors': boolean;
              /**
               * 审核模型检测到是否存在暴力内容
               * [required]
               */
              violence: boolean;
              /**
               * [required]
               */
              'violence/graphic': boolean;
            };
            /**
             * 审核模型对所有分类标签的得分
             */
            type_scores?: {
              /**
               * 审核模型对仇恨言论的得分
               * [required]
               */
              hate: number;
              /**
               * [required]
               */
              'hate/threatening': number;
              /**
               * 审核模型对自残内容的得分
               * [required]
               */
              'self-harm': number;
              /**
               * 审核模型对性内容的得分
               * [required]
               */
              sexual: number;
              /**
               * [required]
               */
              'sexual/minors': number;
              /**
               * 审核模型对暴力内容的得分
               * [required]
               */
              violence: number;
              /**
               * [required]
               */
              'violence/graphic': number;
            };
            /**
             * 审核模型是否将输入内容标记为可疑内容
             */
            flagged?: boolean;
          }>;
        }> & {
          data: {
            /**
             * 要分类的输入文本
             * [required]
             */
            input: string;
            /**
             * 有两种内容审核模型可用：`text-moderation-stable`和`text-moderation-latest`。  默认值`text-moderation-latest`将随着时间的推移自动升级。这可确保您始终使用我们最准确的模型。如果您使用`text-moderation-stable`，我们将在更新模型之前提供提前通知。的准确度`text-moderation-stable`可能略低于 的准确度`text-moderation-latest`。
             * [required]
             */
            model: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * 审核任务的唯一标识符
           * [required]
           */
          id: string;
          /**
           * 用于审核的模型
           * [required]
           */
          model: string;
          /**
           * 审核结果的详细信息
           * [required]
           */
          results: Array<{
            /**
             * 审核模型检测到的所有分类标签
             */
            categories?: {
              /**
               * 审核模型检测到是否存在仇恨言论
               * [required]
               */
              hate: boolean;
              /**
               * [required]
               */
              'hate/threatening': boolean;
              /**
               * 审核模型检测到是否存在自残内容
               * [required]
               */
              'self-harm': boolean;
              /**
               * 审核模型检测到是否存在性内容
               * [required]
               */
              sexual: boolean;
              /**
               * [required]
               */
              'sexual/minors': boolean;
              /**
               * 审核模型检测到是否存在暴力内容
               * [required]
               */
              violence: boolean;
              /**
               * [required]
               */
              'violence/graphic': boolean;
            };
            /**
             * 审核模型对所有分类标签的得分
             */
            type_scores?: {
              /**
               * 审核模型对仇恨言论的得分
               * [required]
               */
              hate: number;
              /**
               * [required]
               */
              'hate/threatening': number;
              /**
               * 审核模型对自残内容的得分
               * [required]
               */
              'self-harm': number;
              /**
               * 审核模型对性内容的得分
               * [required]
               */
              sexual: number;
              /**
               * [required]
               */
              'sexual/minors': number;
              /**
               * 审核模型对暴力内容的得分
               * [required]
               */
              violence: number;
              /**
               * [required]
               */
              'violence/graphic': number;
            };
            /**
             * 审核模型是否将输入内容标记为可疑内容
             */
            flagged?: boolean;
          }>;
        },
        'general.post_v1_moderations',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建助手
       *
       * **path:** /v1/assistants
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 要使用的模型的 ID。您可以使用列表模型API 查看所有可用模型，或查看我们的模型概述以获取它们的描述。
       *   // [required]
       *   model: string
       *   // 助理的名字。最大长度为 256 个字符。
       *   name?: string
       *   // 助理的描述。最大长度为 512 个字符。
       *   description?: string
       *   // 助手使用的系统指令。最大长度为 32768 个字符。
       *   instructions?: string
       *   // 助手上启用的工具列表。每个助手最多可以有 128 个工具。工具的类型可以是`code_interpreter`、`retrieval`、 或`function`。
       *   tools?: Array<{
       *     // 正在定义的工具类型：code_interpreter
       *     type?: string
       *   }>
       *   // 附加到该助手的文件ID列表。助手最多可以附加 20 个文件。文件按其创建日期升序排列。
       *   file_ids?: string[]
       *   // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *   metadata?: object
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   name: string
       *   // [required]
       *   description: unknown | null
       *   // [required]
       *   model: string
       *   // [required]
       *   instructions: string
       *   // [required]
       *   tools: Array<{
       *     type?: string
       *   }>
       *   // [required]
       *   file_ids: string[]
       *   // [required]
       *   metadata: object
       * }
       * ```
       */
      post_v1_assistants<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          name: string;
          /**
           * [required]
           */
          description: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        }> & {
          data: {
            /**
             * 要使用的模型的 ID。您可以使用列表模型API 查看所有可用模型，或查看我们的模型概述以获取它们的描述。
             * [required]
             */
            model: string;
            /**
             * 助理的名字。最大长度为 256 个字符。
             */
            name?: string;
            /**
             * 助理的描述。最大长度为 512 个字符。
             */
            description?: string;
            /**
             * 助手使用的系统指令。最大长度为 32768 个字符。
             */
            instructions?: string;
            /**
             * 助手上启用的工具列表。每个助手最多可以有 128 个工具。工具的类型可以是`code_interpreter`、`retrieval`、 或`function`。
             */
            tools?: Array<{
              /**
               * 正在定义的工具类型：code_interpreter
               */
              type?: string;
            }>;
            /**
             * 附加到该助手的文件ID列表。助手最多可以附加 20 个文件。文件按其创建日期升序排列。
             */
            file_ids?: string[];
            /**
             * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
             */
            metadata?: object;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          name: string;
          /**
           * [required]
           */
          description: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        },
        'general.post_v1_assistants',
        Config
      >;
      /**
       * ---
       *
       * [GET] 列出助手
       *
       * **path:** /v1/assistants
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
       *   limit?: number
       *   // created_at按对象的时间戳排序。asc对于升序和desc降序。
       *   order?: string
       *   // 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
       *   after?: string
       *   // 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
       *   before?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   object: string
       *   // [required]
       *   data: Array<{
       *     // [required]
       *     id: string
       *     // [required]
       *     object: string
       *     // [required]
       *     created_at: number
       *     // [required]
       *     name: string | null
       *     // [required]
       *     description: unknown | null
       *     // [required]
       *     model: string
       *     // [required]
       *     instructions: string | null
       *     // [required]
       *     tools: string[]
       *     // [required]
       *     file_ids: string[]
       *     // [required]
       *     metadata: object
       *   }>
       *   // [required]
       *   first_id: string
       *   // [required]
       *   last_id: string
       *   // [required]
       *   has_more: boolean
       * }
       * ```
       */
      get_v1_assistants<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            name: string | null;
            /**
             * [required]
             */
            description: unknown | null;
            /**
             * [required]
             */
            model: string;
            /**
             * [required]
             */
            instructions: string | null;
            /**
             * [required]
             */
            tools: string[];
            /**
             * [required]
             */
            file_ids: string[];
            /**
             * [required]
             */
            metadata: object;
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        }> & {
          params: {
            /**
             * 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
             */
            limit?: number;
            /**
             * created_at按对象的时间戳排序。asc对于升序和desc降序。
             */
            order?: string;
            /**
             * 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
             */
            after?: string;
            /**
             * 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
             */
            before?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            name: string | null;
            /**
             * [required]
             */
            description: unknown | null;
            /**
             * [required]
             */
            model: string;
            /**
             * [required]
             */
            instructions: string | null;
            /**
             * [required]
             */
            tools: string[];
            /**
             * [required]
             */
            file_ids: string[];
            /**
             * [required]
             */
            metadata: object;
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        },
        'general.get_v1_assistants',
        Config
      >;
      /**
       * ---
       *
       * [GET] 检索助手
       *
       * **path:** /v1/assistants/{assistant_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 要检索的助手的 ID。
       *   // [required]
       *   assistant_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   name: string
       *   // [required]
       *   description: unknown | null
       *   // [required]
       *   model: string
       *   // [required]
       *   instructions: string
       *   // [required]
       *   tools: Array<{
       *     type?: string
       *   }>
       *   // [required]
       *   file_ids: string[]
       *   // [required]
       *   metadata: object
       * }
       * ```
       */
      get_v1_assistants_assistant_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          name: string;
          /**
           * [required]
           */
          description: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        }> & {
          pathParams: {
            /**
             * 要检索的助手的 ID。
             * [required]
             */
            assistant_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          name: string;
          /**
           * [required]
           */
          description: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        },
        'general.get_v1_assistants_assistant_id',
        Config
      >;
      /**
       * ---
       *
       * [POST] 修改助手
       *
       * **path:** /v1/assistants/{assistant_id }
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 需要修改的助手ID。
       *   // [required]
       *   assistant_id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 要使用的模型的 ID。您可以使用列表模型API 查看所有可用模型，或查看我们的模型概述以获取它们的描述。
       *   model?: string
       *   // 助理的名字。最大长度为 256 个字符。
       *   name?: string
       *   // 助理的描述。最大长度为 512 个字符。
       *   description?: string
       *   // 助手使用的系统指令。最大长度为 32768 个字符。
       *   instructions?: string
       *   // 助手上启用的工具列表。每个助手最多可以有 128 个工具。工具的类型可以是code_interpreter、retrieval、 或function。
       *   tools?: Array<{
       *     // 正在定义的工具类型：code_interpreter
       *     type?: string
       *   }>
       *   // 附加到该助手的文件ID列表。助手最多可以附加 20 个文件。文件按其创建日期升序排列。如果某个文件之前已附加到列表但未显示在列表中，则该文件将从助手中删除。
       *   file_ids?: string[]
       *   // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *   metadata?: object
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   name: string
       *   // [required]
       *   description: unknown | null
       *   // [required]
       *   model: string
       *   // [required]
       *   instructions: string
       *   // [required]
       *   tools: Array<{
       *     type?: string
       *   }>
       *   // [required]
       *   file_ids: string[]
       *   // [required]
       *   metadata: object
       * }
       * ```
       */
      post_v1_assistants_assistant_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          name: string;
          /**
           * [required]
           */
          description: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        }> & {
          pathParams: {
            /**
             * 需要修改的助手ID。
             * [required]
             */
            assistant_id: string;
          };
          data: {
            /**
             * 要使用的模型的 ID。您可以使用列表模型API 查看所有可用模型，或查看我们的模型概述以获取它们的描述。
             */
            model?: string;
            /**
             * 助理的名字。最大长度为 256 个字符。
             */
            name?: string;
            /**
             * 助理的描述。最大长度为 512 个字符。
             */
            description?: string;
            /**
             * 助手使用的系统指令。最大长度为 32768 个字符。
             */
            instructions?: string;
            /**
             * 助手上启用的工具列表。每个助手最多可以有 128 个工具。工具的类型可以是code_interpreter、retrieval、 或function。
             */
            tools?: Array<{
              /**
               * 正在定义的工具类型：code_interpreter
               */
              type?: string;
            }>;
            /**
             * 附加到该助手的文件ID列表。助手最多可以附加 20 个文件。文件按其创建日期升序排列。如果某个文件之前已附加到列表但未显示在列表中，则该文件将从助手中删除。
             */
            file_ids?: string[];
            /**
             * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
             */
            metadata?: object;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          name: string;
          /**
           * [required]
           */
          description: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        },
        'general.post_v1_assistants_assistant_id',
        Config
      >;
      /**
       * ---
       *
       * [DELETE] 删除助手
       *
       * **path:** /v1/assistants/{assistant_id }
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 要删除的助手的ID。
       *   // [required]
       *   assistant_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   deleted: boolean
       * }
       * ```
       */
      delete_v1_assistants_assistant_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          deleted: boolean;
        }> & {
          pathParams: {
            /**
             * 要删除的助手的ID。
             * [required]
             */
            assistant_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          deleted: boolean;
        },
        'general.delete_v1_assistants_assistant_id',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建辅助文件
       *
       * **path:** /v1/assistants/{assistant_id}/files
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 助手应使用的[文件](https://platform.openai.com/docs/api-reference/files)ID （带有）。`purpose="assistants"`对于诸如`retrieval`和`code_interpreter`之类可以访问文件的工具很有用。
       *   // [required]
       *   assistant_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   assistant_id: string
       * }
       * ```
       */
      post_v1_assistants_assistant_id_files<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
        }> & {
          pathParams: {
            /**
             * 助手应使用的[文件](https://platform.openai.com/docs/api-reference/files)ID （带有）。`purpose="assistants"`对于诸如`retrieval`和`code_interpreter`之类可以访问文件的工具很有用。
             * [required]
             */
            assistant_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
        },
        'general.post_v1_assistants_assistant_id_files',
        Config
      >;
      /**
       * ---
       *
       * [GET] 列出助手文件
       *
       * **path:** /v1/assistants/{assistant_id}/files
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 文件所属助手的ID。
       *   // [required]
       *   assistant_id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
       *   limit?: number
       *   // created_at按对象的时间戳排序。asc对于升序和desc降序。
       *   order?: string
       *   // 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
       *   after?: string
       *   // 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
       *   before?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   object: string
       *   // [required]
       *   data: Array<{
       *     // [required]
       *     id: string
       *     // [required]
       *     object: string
       *     // [required]
       *     created_at: number
       *     // [required]
       *     assistant_id: string
       *   }>
       *   // [required]
       *   first_id: string
       *   // [required]
       *   last_id: string
       *   // [required]
       *   has_more: boolean
       * }
       * ```
       */
      get_v1_assistants_assistant_id_files<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            assistant_id: string;
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        }> & {
          pathParams: {
            /**
             * 文件所属助手的ID。
             * [required]
             */
            assistant_id: string;
          };
          params: {
            /**
             * 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
             */
            limit?: number;
            /**
             * created_at按对象的时间戳排序。asc对于升序和desc降序。
             */
            order?: string;
            /**
             * 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
             */
            after?: string;
            /**
             * 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
             */
            before?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            assistant_id: string;
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        },
        'general.get_v1_assistants_assistant_id_files',
        Config
      >;
      /**
       * ---
       *
       * [GET] 检索助手文件
       *
       * **path:** /v1/assistants/{assistant_id}/files/{file_id }
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 文件所属助手的ID。
       *   // [required]
       *   assistant_id: string
       *   // 我们获取的文件的 ID。
       *   // [required]
       *   file_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   assistant_id: string
       * }
       * ```
       */
      get_v1_assistants_assistant_id_files_file_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
        }> & {
          pathParams: {
            /**
             * 文件所属助手的ID。
             * [required]
             */
            assistant_id: string;
            /**
             * 我们获取的文件的 ID。
             * [required]
             */
            file_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
        },
        'general.get_v1_assistants_assistant_id_files_file_id',
        Config
      >;
      /**
       * ---
       *
       * [DELETE] 删除辅助文件
       *
       * **path:** /v1/assistants/{assistant_id}/files/{file_id }
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 文件所属助手的ID。
       *   // [required]
       *   assistant_id: string
       *   // 要删除的文件的 ID。
       *   // [required]
       *   file_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   deleted: boolean
       * }
       * ```
       */
      delete_v1_assistants_assistant_id_files_file_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          deleted: boolean;
        }> & {
          pathParams: {
            /**
             * 文件所属助手的ID。
             * [required]
             */
            assistant_id: string;
            /**
             * 要删除的文件的 ID。
             * [required]
             */
            file_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          deleted: boolean;
        },
        'general.delete_v1_assistants_assistant_id_files_file_id',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建线程
       *
       * **path:** /v1/threads
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 用于启动线程的消息列表。
       *   messages?: Array<{
       *     // 创建消息的实体的角色。目前仅user支持。
       *     // [required]
       *     role: string
       *     // 消息的内容。
       *     // [required]
       *     content: string
       *     // 消息应使用的文件ID列表。一条消息最多可以附加 10 个文件。retrieval对于code_interpreter可以访问和使用文件的工具非常有用。
       *     file_ids?: string
       *     // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *     metadata?: string
       *   }>
       *   // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *   metadata?: object
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   metadata: object
       * }
       * ```
       */
      post_v1_threads<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          metadata: object;
        }> & {
          data: {
            /**
             * 用于启动线程的消息列表。
             */
            messages?: Array<{
              /**
               * 创建消息的实体的角色。目前仅user支持。
               * [required]
               */
              role: string;
              /**
               * 消息的内容。
               * [required]
               */
              content: string;
              /**
               * 消息应使用的文件ID列表。一条消息最多可以附加 10 个文件。retrieval对于code_interpreter可以访问和使用文件的工具非常有用。
               */
              file_ids?: string;
              /**
               * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
               */
              metadata?: string;
            }>;
            /**
             * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
             */
            metadata?: object;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          metadata: object;
        },
        'general.post_v1_threads',
        Config
      >;
      /**
       * ---
       *
       * [POST] 修改线程
       *
       * **path:** /v1/threads/{thread_id }
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 要修改的线程的ID。只能metadata修改。
       *   // [required]
       *   thread_id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *   metadata?: {
       *     modified?: string
       *     user?: string
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   metadata: {
       *     // [required]
       *     modified: string
       *     // [required]
       *     user: string
       *   }
       * }
       * ```
       */
      post_v1_threads_thread_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          metadata: {
            /**
             * [required]
             */
            modified: string;
            /**
             * [required]
             */
            user: string;
          };
        }> & {
          pathParams: {
            /**
             * 要修改的线程的ID。只能metadata修改。
             * [required]
             */
            thread_id: string;
          };
          data: {
            /**
             * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
             */
            metadata?: {
              modified?: string;
              user?: string;
            };
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          metadata: {
            /**
             * [required]
             */
            modified: string;
            /**
             * [required]
             */
            user: string;
          };
        },
        'general.post_v1_threads_thread_id',
        Config
      >;
      /**
       * ---
       *
       * [DELETE] 删除话题
       *
       * **path:** /v1/threads/{thread_id }
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 要删除的线程的 ID。
       *   // [required]
       *   thread_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   deleted: boolean
       * }
       * ```
       */
      delete_v1_threads_thread_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          deleted: boolean;
        }> & {
          pathParams: {
            /**
             * 要删除的线程的 ID。
             * [required]
             */
            thread_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          deleted: boolean;
        },
        'general.delete_v1_threads_thread_id',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建消息
       *
       * **path:** /v1/threads/{thread_id}/messages
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 要为其创建消息的线程的 ID 。
       *   // [required]
       *   thread_id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 创建消息的实体的角色。目前仅user支持。
       *   // [required]
       *   role: string
       *   // 消息的内容。
       *   // [required]
       *   content: string
       *   // 消息应使用的文件ID列表。一条消息最多可以附加 10 个文件。retrieval对于code_interpreter可以访问和使用文件的工具非常有用。
       *   file_ids?: string[]
       *   // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *   metadata?: object
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // 标识符，可以在 API 端点中引用。
       *   // [required]
       *   id: string
       *   // 对象类型，始终为`thread.message`。
       *   // [required]
       *   object: string
       *   // 创建消息时的 Unix 时间戳（以秒为单位）。
       *   // [required]
       *   created_at: number
       *   // 该消息所属的线程ID 。
       *   // [required]
       *   thread_id: string
       *   // 产生消息的实体。`user`或之一`assistant`。
       *   // [required]
       *   role: string
       *   // 文本和/或图像数组中的消息内容。
       *   // [required]
       *   content: Array<{
       *     // 总是image_file。
       *     type?: string
       *     // 作为消息一部分的文本内容。
       *     text?: {
       *       // [required]
       *       value: string
       *       // [required]
       *       annotations: string[]
       *     }
       *   }>
       *   // 助手应使用的[文件](https://platform.openai.com/docs/api-reference/files)ID列表。对于可访问文件的检索和 code_interpreter 等工具很有用。一条消息最多可以附加 10 个文件。
       *   // [required]
       *   file_ids: string[]
       *   // 如果适用，则为创作此消息的[助理](https://platform.openai.com/docs/api-reference/assistants)的 ID 。
       *   // [required]
       *   assistant_id: unknown | null
       *   // 如果适用，与此消息的创作关联的[运行](https://platform.openai.com/docs/api-reference/runs)的 ID 。
       *   // [required]
       *   run_id: unknown | null
       *   // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *   // [required]
       *   metadata: object
       * }
       * ```
       */
      post_v1_threads_thread_id_messages<
        Config extends Alova2MethodConfig<{
          /**
           * 标识符，可以在 API 端点中引用。
           * [required]
           */
          id: string;
          /**
           * 对象类型，始终为`thread.message`。
           * [required]
           */
          object: string;
          /**
           * 创建消息时的 Unix 时间戳（以秒为单位）。
           * [required]
           */
          created_at: number;
          /**
           * 该消息所属的线程ID 。
           * [required]
           */
          thread_id: string;
          /**
           * 产生消息的实体。`user`或之一`assistant`。
           * [required]
           */
          role: string;
          /**
           * 文本和/或图像数组中的消息内容。
           * [required]
           */
          content: Array<{
            /**
             * 总是image_file。
             */
            type?: string;
            /**
             * 作为消息一部分的文本内容。
             */
            text?: {
              /**
               * [required]
               */
              value: string;
              /**
               * [required]
               */
              annotations: string[];
            };
          }>;
          /**
           * 助手应使用的[文件](https://platform.openai.com/docs/api-reference/files)ID列表。对于可访问文件的检索和 code_interpreter 等工具很有用。一条消息最多可以附加 10 个文件。
           * [required]
           */
          file_ids: string[];
          /**
           * 如果适用，则为创作此消息的[助理](https://platform.openai.com/docs/api-reference/assistants)的 ID 。
           * [required]
           */
          assistant_id: unknown | null;
          /**
           * 如果适用，与此消息的创作关联的[运行](https://platform.openai.com/docs/api-reference/runs)的 ID 。
           * [required]
           */
          run_id: unknown | null;
          /**
           * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
           * [required]
           */
          metadata: object;
        }> & {
          pathParams: {
            /**
             * 要为其创建消息的线程的 ID 。
             * [required]
             */
            thread_id: string;
          };
          data: {
            /**
             * 创建消息的实体的角色。目前仅user支持。
             * [required]
             */
            role: string;
            /**
             * 消息的内容。
             * [required]
             */
            content: string;
            /**
             * 消息应使用的文件ID列表。一条消息最多可以附加 10 个文件。retrieval对于code_interpreter可以访问和使用文件的工具非常有用。
             */
            file_ids?: string[];
            /**
             * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
             */
            metadata?: object;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * 标识符，可以在 API 端点中引用。
           * [required]
           */
          id: string;
          /**
           * 对象类型，始终为`thread.message`。
           * [required]
           */
          object: string;
          /**
           * 创建消息时的 Unix 时间戳（以秒为单位）。
           * [required]
           */
          created_at: number;
          /**
           * 该消息所属的线程ID 。
           * [required]
           */
          thread_id: string;
          /**
           * 产生消息的实体。`user`或之一`assistant`。
           * [required]
           */
          role: string;
          /**
           * 文本和/或图像数组中的消息内容。
           * [required]
           */
          content: Array<{
            /**
             * 总是image_file。
             */
            type?: string;
            /**
             * 作为消息一部分的文本内容。
             */
            text?: {
              /**
               * [required]
               */
              value: string;
              /**
               * [required]
               */
              annotations: string[];
            };
          }>;
          /**
           * 助手应使用的[文件](https://platform.openai.com/docs/api-reference/files)ID列表。对于可访问文件的检索和 code_interpreter 等工具很有用。一条消息最多可以附加 10 个文件。
           * [required]
           */
          file_ids: string[];
          /**
           * 如果适用，则为创作此消息的[助理](https://platform.openai.com/docs/api-reference/assistants)的 ID 。
           * [required]
           */
          assistant_id: unknown | null;
          /**
           * 如果适用，与此消息的创作关联的[运行](https://platform.openai.com/docs/api-reference/runs)的 ID 。
           * [required]
           */
          run_id: unknown | null;
          /**
           * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
           * [required]
           */
          metadata: object;
        },
        'general.post_v1_threads_thread_id_messages',
        Config
      >;
      /**
       * ---
       *
       * [GET] 列出消息
       *
       * **path:** /v1/threads/{thread_id}/messages
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   thread_id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
       *   limit?: number
       *   // created_at按对象的时间戳排序。asc对于升序和desc降序。
       *   order?: string
       *   // 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
       *   after?: string
       *   // 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
       *   before?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   object: string
       *   // [required]
       *   data: Array<{
       *     // [required]
       *     id: string
       *     // [required]
       *     object: string
       *     // [required]
       *     created_at: number
       *     // [required]
       *     thread_id: string
       *     // [required]
       *     role: string
       *     // [required]
       *     content: Array<{
       *       // [required]
       *       type: string
       *       // [required]
       *       text: {
       *         // [required]
       *         value: string
       *         // [required]
       *         annotations: string[]
       *       }
       *     }>
       *     // [required]
       *     file_ids: string[]
       *     // [required]
       *     assistant_id: unknown | null
       *     // [required]
       *     run_id: unknown | null
       *     // [required]
       *     metadata: object
       *   }>
       *   // [required]
       *   first_id: string
       *   // [required]
       *   last_id: string
       *   // [required]
       *   has_more: boolean
       * }
       * ```
       */
      get_v1_threads_thread_id_messages<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            thread_id: string;
            /**
             * [required]
             */
            role: string;
            /**
             * [required]
             */
            content: Array<{
              /**
               * [required]
               */
              type: string;
              /**
               * [required]
               */
              text: {
                /**
                 * [required]
                 */
                value: string;
                /**
                 * [required]
                 */
                annotations: string[];
              };
            }>;
            /**
             * [required]
             */
            file_ids: string[];
            /**
             * [required]
             */
            assistant_id: unknown | null;
            /**
             * [required]
             */
            run_id: unknown | null;
            /**
             * [required]
             */
            metadata: object;
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        }> & {
          pathParams: {
            /**
             * [required]
             */
            thread_id: string;
          };
          params: {
            /**
             * 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
             */
            limit?: number;
            /**
             * created_at按对象的时间戳排序。asc对于升序和desc降序。
             */
            order?: string;
            /**
             * 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
             */
            after?: string;
            /**
             * 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
             */
            before?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            thread_id: string;
            /**
             * [required]
             */
            role: string;
            /**
             * [required]
             */
            content: Array<{
              /**
               * [required]
               */
              type: string;
              /**
               * [required]
               */
              text: {
                /**
                 * [required]
                 */
                value: string;
                /**
                 * [required]
                 */
                annotations: string[];
              };
            }>;
            /**
             * [required]
             */
            file_ids: string[];
            /**
             * [required]
             */
            assistant_id: unknown | null;
            /**
             * [required]
             */
            run_id: unknown | null;
            /**
             * [required]
             */
            metadata: object;
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        },
        'general.get_v1_threads_thread_id_messages',
        Config
      >;
      /**
       * ---
       *
       * [GET] 检索消息
       *
       * **path:** /v1/threads/{thread_id}/messages/{message_id }
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 该消息所属线程的ID 。
       *   // [required]
       *   thread_id: string
       *   // 要检索的消息的 ID。
       *   // [required]
       *   message_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   thread_id: string
       *   // [required]
       *   role: string
       *   // [required]
       *   content: Array<{
       *     type?: string
       *     text?: {
       *       // [required]
       *       value: string
       *       // [required]
       *       annotations: string[]
       *     }
       *   }>
       *   // [required]
       *   file_ids: string[]
       *   // [required]
       *   assistant_id: unknown | null
       *   // [required]
       *   run_id: unknown | null
       *   // [required]
       *   metadata: object
       * }
       * ```
       */
      get_v1_threads_thread_id_messages_message_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          role: string;
          /**
           * [required]
           */
          content: Array<{
            type?: string;
            text?: {
              /**
               * [required]
               */
              value: string;
              /**
               * [required]
               */
              annotations: string[];
            };
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          assistant_id: unknown | null;
          /**
           * [required]
           */
          run_id: unknown | null;
          /**
           * [required]
           */
          metadata: object;
        }> & {
          pathParams: {
            /**
             * 该消息所属线程的ID 。
             * [required]
             */
            thread_id: string;
            /**
             * 要检索的消息的 ID。
             * [required]
             */
            message_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          role: string;
          /**
           * [required]
           */
          content: Array<{
            type?: string;
            text?: {
              /**
               * [required]
               */
              value: string;
              /**
               * [required]
               */
              annotations: string[];
            };
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          assistant_id: unknown | null;
          /**
           * [required]
           */
          run_id: unknown | null;
          /**
           * [required]
           */
          metadata: object;
        },
        'general.get_v1_threads_thread_id_messages_message_id',
        Config
      >;
      /**
       * ---
       *
       * [POST] 修改留言
       *
       * **path:** /v1/threads/{thread_id}/messages/{message_id }
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 该消息所属线程的ID。
       *   // [required]
       *   thread_id: string
       *   // 要修改的消息的 ID。
       *   // [required]
       *   message_id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *   // [required]
       *   metadata: {
       *     // [required]
       *     modified: string
       *     // [required]
       *     user: string
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   thread_id: string
       *   // [required]
       *   role: string
       *   // [required]
       *   content: Array<{
       *     type?: string
       *     text?: {
       *       // [required]
       *       value: string
       *       // [required]
       *       annotations: string[]
       *     }
       *   }>
       *   // [required]
       *   file_ids: string[]
       *   // [required]
       *   assistant_id: unknown | null
       *   // [required]
       *   run_id: unknown | null
       *   // [required]
       *   metadata: {
       *     // [required]
       *     modified: string
       *     // [required]
       *     user: string
       *   }
       * }
       * ```
       */
      post_v1_threads_thread_id_messages_message_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          role: string;
          /**
           * [required]
           */
          content: Array<{
            type?: string;
            text?: {
              /**
               * [required]
               */
              value: string;
              /**
               * [required]
               */
              annotations: string[];
            };
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          assistant_id: unknown | null;
          /**
           * [required]
           */
          run_id: unknown | null;
          /**
           * [required]
           */
          metadata: {
            /**
             * [required]
             */
            modified: string;
            /**
             * [required]
             */
            user: string;
          };
        }> & {
          pathParams: {
            /**
             * 该消息所属线程的ID。
             * [required]
             */
            thread_id: string;
            /**
             * 要修改的消息的 ID。
             * [required]
             */
            message_id: string;
          };
          data: {
            /**
             * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
             * [required]
             */
            metadata: {
              /**
               * [required]
               */
              modified: string;
              /**
               * [required]
               */
              user: string;
            };
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          role: string;
          /**
           * [required]
           */
          content: Array<{
            type?: string;
            text?: {
              /**
               * [required]
               */
              value: string;
              /**
               * [required]
               */
              annotations: string[];
            };
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          assistant_id: unknown | null;
          /**
           * [required]
           */
          run_id: unknown | null;
          /**
           * [required]
           */
          metadata: {
            /**
             * [required]
             */
            modified: string;
            /**
             * [required]
             */
            user: string;
          };
        },
        'general.post_v1_threads_thread_id_messages_message_id',
        Config
      >;
      /**
       * ---
       *
       * [GET] 检索消息文件
       *
       * **path:** /v1 /threads/{thread_id}/messages/{message_id}/files/{file_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 消息和文件所属线程的ID。
       *   // [required]
       *   thread_id: string
       *   // 文件所属消息的 ID。
       *   // [required]
       *   message_id: string
       *   // 正在检索的文件的 ID。
       *   // [required]
       *   file_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   message_id: string
       * }
       * ```
       */
      get_v1_threads_thread_id_messages_message_id_files_file_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          message_id: string;
        }> & {
          pathParams: {
            /**
             * 消息和文件所属线程的ID。
             * [required]
             */
            thread_id: string;
            /**
             * 文件所属消息的 ID。
             * [required]
             */
            message_id: string;
            /**
             * 正在检索的文件的 ID。
             * [required]
             */
            file_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          message_id: string;
        },
        'general.get_v1_threads_thread_id_messages_message_id_files_file_id',
        Config
      >;
      /**
       * ---
       *
       * [GET] 列出消息文件
       *
       * **path:** /v1/threads/{thread_id}/messages/{message_id}/files _
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 消息和文件所属线程的 ID。
       *   // [required]
       *   thread_id: string
       *   // 文件所属的消息的 ID。
       *   // [required]
       *   message_id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
       *   limit?: number
       *   // created_at按对象的时间戳排序。asc对于升序和desc降序。
       *   order?: string
       *   // 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
       *   after?: string
       *   // 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
       *   before?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   object: string
       *   // [required]
       *   data: Array<{
       *     // [required]
       *     id: string
       *     // [required]
       *     object: string
       *     // [required]
       *     created_at: number
       *     // [required]
       *     message_id: string
       *   }>
       *   // [required]
       *   first_id: string
       *   // [required]
       *   last_id: string
       *   // [required]
       *   has_more: boolean
       * }
       * ```
       */
      get_v1_threads_thread_id_messages_message_id_files__<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            message_id: string;
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        }> & {
          pathParams: {
            /**
             * 消息和文件所属线程的 ID。
             * [required]
             */
            thread_id: string;
            /**
             * 文件所属的消息的 ID。
             * [required]
             */
            message_id: string;
          };
          params: {
            /**
             * 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
             */
            limit?: number;
            /**
             * created_at按对象的时间戳排序。asc对于升序和desc降序。
             */
            order?: string;
            /**
             * 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
             */
            after?: string;
            /**
             * 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
             */
            before?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            message_id: string;
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        },
        'general.get_v1_threads_thread_id_messages_message_id_files__',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建运行
       *
       * **path:** /v1/threads/{thread_id}/runs
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 要运行的线程的 ID。
       *   // [required]
       *   thread_id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 用于执行此运行的助手的 ID 。
       *   // [required]
       *   assistant_id: string
       *   // 用于执行此运行的模型的 ID 。如果此处提供了值，它将覆盖与助手关联的模型。如果没有，将使用与助手关联的模型。
       *   // [required]
       *   model: string
       *   // 覆盖助手的默认系统消息。这对于修改每次运行的行为非常有用。
       *   // [required]
       *   instructions: string
       *   // 覆盖助手可用于此运行的工具。这对于修改每次运行的行为非常有用。
       *   tools?: Array<{
       *     'Code interpreter tool'?: {
       *       // 正在定义的工具类型：code_interpreter
       *       // [required]
       *       type: string
       *     }
       *     'Retrieval tool'?: {
       *       // 正在定义的工具类型：retrieval
       *       // [required]
       *       type: string
       *     }
       *     'Function tool'?: {
       *       // 正在定义的工具类型：function
       *       // [required]
       *       type: string
       *       // [required]
       *       function: {
       *         // 对函数功能的描述，模型使用它来选择何时以及如何调用该函数。
       *         description?: string
       *         // 要调用的函数的名称。必须是 az、AZ、0-9，或包含下划线和破折号，最大长度为 64。
       *         // [required]
       *         name: string
       *         // 函数接受的参数，描述为 JSON Schema 对象。请参阅指南以获取示例，并参阅 JSON 架构参考以获取有关格式的文档。  要描述不接受参数的函数，请提供值{"type": "object", "properties": {}}。
       *         // [required]
       *         parameters: object
       *       }
       *     }
       *   }>
       *   // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *   metadata?: object
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   assistant_id: string
       *   // [required]
       *   thread_id: string
       *   // [required]
       *   status: string
       *   // [required]
       *   started_at: number
       *   // [required]
       *   expires_at: unknown | null
       *   // [required]
       *   cancelled_at: unknown | null
       *   // [required]
       *   failed_at: unknown | null
       *   // [required]
       *   completed_at: number
       *   // [required]
       *   last_error: unknown | null
       *   // [required]
       *   model: string
       *   // [required]
       *   instructions: unknown | null
       *   // [required]
       *   tools: Array<{
       *     type?: string
       *   }>
       *   // [required]
       *   file_ids: string[]
       *   // [required]
       *   metadata: object
       * }
       * ```
       */
      post_v1_threads_thread_id_runs<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          started_at: number;
          /**
           * [required]
           */
          expires_at: unknown | null;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          completed_at: number;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: unknown | null;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        }> & {
          pathParams: {
            /**
             * 要运行的线程的 ID。
             * [required]
             */
            thread_id: string;
          };
          data: {
            /**
             * 用于执行此运行的助手的 ID 。
             * [required]
             */
            assistant_id: string;
            /**
             * 用于执行此运行的模型的 ID 。如果此处提供了值，它将覆盖与助手关联的模型。如果没有，将使用与助手关联的模型。
             * [required]
             */
            model: string;
            /**
             * 覆盖助手的默认系统消息。这对于修改每次运行的行为非常有用。
             * [required]
             */
            instructions: string;
            /**
             * 覆盖助手可用于此运行的工具。这对于修改每次运行的行为非常有用。
             */
            tools?: Array<{
              'Code interpreter tool'?: {
                /**
                 * 正在定义的工具类型：code_interpreter
                 * [required]
                 */
                type: string;
              };
              'Retrieval tool'?: {
                /**
                 * 正在定义的工具类型：retrieval
                 * [required]
                 */
                type: string;
              };
              'Function tool'?: {
                /**
                 * 正在定义的工具类型：function
                 * [required]
                 */
                type: string;
                /**
                 * [required]
                 */
                function: {
                  /**
                   * 对函数功能的描述，模型使用它来选择何时以及如何调用该函数。
                   */
                  description?: string;
                  /**
                   * 要调用的函数的名称。必须是 az、AZ、0-9，或包含下划线和破折号，最大长度为 64。
                   * [required]
                   */
                  name: string;
                  /**
                   * 函数接受的参数，描述为 JSON Schema 对象。请参阅指南以获取示例，并参阅 JSON 架构参考以获取有关格式的文档。  要描述不接受参数的函数，请提供值{"type": "object", "properties": {}}。
                   * [required]
                   */
                  parameters: object;
                };
              };
            }>;
            /**
             * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
             */
            metadata?: object;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          started_at: number;
          /**
           * [required]
           */
          expires_at: unknown | null;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          completed_at: number;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: unknown | null;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        },
        'general.post_v1_threads_thread_id_runs',
        Config
      >;
      /**
       * ---
       *
       * [GET] 列表运行
       *
       * **path:** /v1/threads/{thread_id}/runs
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 运行所属线程的 ID。
       *   // [required]
       *   thread_id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
       *   limit?: number
       *   // created_at按对象的时间戳排序。asc对于升序和desc降序。
       *   order?: string
       *   // 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
       *   after?: string
       *   // 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
       *   before?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   object: string
       *   // [required]
       *   data: Array<{
       *     // [required]
       *     id: string
       *     // [required]
       *     object: string
       *     // [required]
       *     created_at: number
       *     // [required]
       *     assistant_id: string
       *     // [required]
       *     thread_id: string
       *     // [required]
       *     status: string
       *     // [required]
       *     started_at: number
       *     // [required]
       *     expires_at: unknown | null
       *     // [required]
       *     cancelled_at: unknown | null
       *     // [required]
       *     failed_at: unknown | null
       *     // [required]
       *     completed_at: number
       *     // [required]
       *     last_error: unknown | null
       *     // [required]
       *     model: string
       *     // [required]
       *     instructions: unknown | null
       *     // [required]
       *     tools: Array<{
       *       // [required]
       *       type: string
       *     }>
       *     // [required]
       *     file_ids: string[]
       *     // [required]
       *     metadata: object
       *   }>
       *   // [required]
       *   first_id: string
       *   // [required]
       *   last_id: string
       *   // [required]
       *   has_more: boolean
       * }
       * ```
       */
      get_v1_threads_thread_id_runs<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            assistant_id: string;
            /**
             * [required]
             */
            thread_id: string;
            /**
             * [required]
             */
            status: string;
            /**
             * [required]
             */
            started_at: number;
            /**
             * [required]
             */
            expires_at: unknown | null;
            /**
             * [required]
             */
            cancelled_at: unknown | null;
            /**
             * [required]
             */
            failed_at: unknown | null;
            /**
             * [required]
             */
            completed_at: number;
            /**
             * [required]
             */
            last_error: unknown | null;
            /**
             * [required]
             */
            model: string;
            /**
             * [required]
             */
            instructions: unknown | null;
            /**
             * [required]
             */
            tools: Array<{
              /**
               * [required]
               */
              type: string;
            }>;
            /**
             * [required]
             */
            file_ids: string[];
            /**
             * [required]
             */
            metadata: object;
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        }> & {
          pathParams: {
            /**
             * 运行所属线程的 ID。
             * [required]
             */
            thread_id: string;
          };
          params: {
            /**
             * 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
             */
            limit?: number;
            /**
             * created_at按对象的时间戳排序。asc对于升序和desc降序。
             */
            order?: string;
            /**
             * 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
             */
            after?: string;
            /**
             * 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
             */
            before?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            /**
             * [required]
             */
            id: string;
            /**
             * [required]
             */
            object: string;
            /**
             * [required]
             */
            created_at: number;
            /**
             * [required]
             */
            assistant_id: string;
            /**
             * [required]
             */
            thread_id: string;
            /**
             * [required]
             */
            status: string;
            /**
             * [required]
             */
            started_at: number;
            /**
             * [required]
             */
            expires_at: unknown | null;
            /**
             * [required]
             */
            cancelled_at: unknown | null;
            /**
             * [required]
             */
            failed_at: unknown | null;
            /**
             * [required]
             */
            completed_at: number;
            /**
             * [required]
             */
            last_error: unknown | null;
            /**
             * [required]
             */
            model: string;
            /**
             * [required]
             */
            instructions: unknown | null;
            /**
             * [required]
             */
            tools: Array<{
              /**
               * [required]
               */
              type: string;
            }>;
            /**
             * [required]
             */
            file_ids: string[];
            /**
             * [required]
             */
            metadata: object;
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        },
        'general.get_v1_threads_thread_id_runs',
        Config
      >;
      /**
       * ---
       *
       * [GET] 修改运行
       *
       * **path:** /v1/threads/{thread_id}/runs/{run_id }
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 运行的线程的 ID 。
       *   // [required]
       *   thread_id: string
       *   // 要修改的运行的 ID。
       *   // [required]
       *   run_id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *   metadata?: {
       *     // [required]
       *     user_id: string
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   assistant_id: string
       *   // [required]
       *   thread_id: string
       *   // [required]
       *   status: string
       *   // [required]
       *   started_at: number
       *   // [required]
       *   expires_at: unknown | null
       *   // [required]
       *   cancelled_at: unknown | null
       *   // [required]
       *   failed_at: unknown | null
       *   // [required]
       *   completed_at: number
       *   // [required]
       *   last_error: unknown | null
       *   // [required]
       *   model: string
       *   // [required]
       *   instructions: unknown | null
       *   // [required]
       *   tools: Array<{
       *     type?: string
       *   }>
       *   // [required]
       *   file_ids: string[]
       *   // [required]
       *   metadata: {
       *     // [required]
       *     user_id: string
       *   }
       * }
       * ```
       */
      get_v1_threads_thread_id_runs_run_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          started_at: number;
          /**
           * [required]
           */
          expires_at: unknown | null;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          completed_at: number;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: unknown | null;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: {
            /**
             * [required]
             */
            user_id: string;
          };
        }> & {
          pathParams: {
            /**
             * 运行的线程的 ID 。
             * [required]
             */
            thread_id: string;
            /**
             * 要修改的运行的 ID。
             * [required]
             */
            run_id: string;
          };
          data: {
            /**
             * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
             */
            metadata?: {
              /**
               * [required]
               */
              user_id: string;
            };
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          started_at: number;
          /**
           * [required]
           */
          expires_at: unknown | null;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          completed_at: number;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: unknown | null;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: {
            /**
             * [required]
             */
            user_id: string;
          };
        },
        'general.get_v1_threads_thread_id_runs_run_id',
        Config
      >;
      /**
       * ---
       *
       * [POST] 提交工具输出以运行
       *
       * **path:** /v1/threads/{thread_id}/runs/{run_id}/submit_tool_outputs
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 此运行所属线程的 ID 。
       *   // [required]
       *   thread_id: string
       *   // 需要提交工具输出的运行的 ID。
       *   // [required]
       *   run_id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 为其提交输出的工具列表。
       *   // [required]
       *   tool_outputs: Array<{
       *     // required_action正在提交输出的运行对象内的对象中的工具调用的 ID 。
       *     tool_call_id?: string
       *     // 要提交以继续运行的工具调用的输出。
       *     output?: string
       *   }>
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   assistant_id: string
       *   // [required]
       *   thread_id: string
       *   // [required]
       *   status: string
       *   // [required]
       *   started_at: number
       *   // [required]
       *   expires_at: number
       *   // [required]
       *   cancelled_at: unknown | null
       *   // [required]
       *   failed_at: unknown | null
       *   // [required]
       *   completed_at: unknown | null
       *   // [required]
       *   last_error: unknown | null
       *   // [required]
       *   model: string
       *   // [required]
       *   instructions: string
       *   // [required]
       *   tools: Array<{
       *     type?: string
       *     function?: {
       *       // [required]
       *       name: string
       *       // [required]
       *       description: string
       *       // [required]
       *       parameters: {
       *         // [required]
       *         type: string
       *         // [required]
       *         properties: {
       *           // [required]
       *           location: {
       *             // [required]
       *             type: string
       *             // [required]
       *             description: string
       *           }
       *           // [required]
       *           unit: {
       *             // [required]
       *             type: string
       *             // [required]
       *             enum: string[]
       *           }
       *         }
       *         // [required]
       *         required: string[]
       *       }
       *     }
       *   }>
       *   // [required]
       *   file_ids: string[]
       *   // [required]
       *   metadata: object
       * }
       * ```
       */
      post_v1_threads_thread_id_runs_run_id_submit_tool_outputs<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          started_at: number;
          /**
           * [required]
           */
          expires_at: number;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          completed_at: unknown | null;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
            function?: {
              /**
               * [required]
               */
              name: string;
              /**
               * [required]
               */
              description: string;
              /**
               * [required]
               */
              parameters: {
                /**
                 * [required]
                 */
                type: string;
                /**
                 * [required]
                 */
                properties: {
                  /**
                   * [required]
                   */
                  location: {
                    /**
                     * [required]
                     */
                    type: string;
                    /**
                     * [required]
                     */
                    description: string;
                  };
                  /**
                   * [required]
                   */
                  unit: {
                    /**
                     * [required]
                     */
                    type: string;
                    /**
                     * [required]
                     */
                    enum: string[];
                  };
                };
                /**
                 * [required]
                 */
                required: string[];
              };
            };
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        }> & {
          pathParams: {
            /**
             * 此运行所属线程的 ID 。
             * [required]
             */
            thread_id: string;
            /**
             * 需要提交工具输出的运行的 ID。
             * [required]
             */
            run_id: string;
          };
          data: {
            /**
             * 为其提交输出的工具列表。
             * [required]
             */
            tool_outputs: Array<{
              /**
               * required_action正在提交输出的运行对象内的对象中的工具调用的 ID 。
               */
              tool_call_id?: string;
              /**
               * 要提交以继续运行的工具调用的输出。
               */
              output?: string;
            }>;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          started_at: number;
          /**
           * [required]
           */
          expires_at: number;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          completed_at: unknown | null;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
            function?: {
              /**
               * [required]
               */
              name: string;
              /**
               * [required]
               */
              description: string;
              /**
               * [required]
               */
              parameters: {
                /**
                 * [required]
                 */
                type: string;
                /**
                 * [required]
                 */
                properties: {
                  /**
                   * [required]
                   */
                  location: {
                    /**
                     * [required]
                     */
                    type: string;
                    /**
                     * [required]
                     */
                    description: string;
                  };
                  /**
                   * [required]
                   */
                  unit: {
                    /**
                     * [required]
                     */
                    type: string;
                    /**
                     * [required]
                     */
                    enum: string[];
                  };
                };
                /**
                 * [required]
                 */
                required: string[];
              };
            };
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        },
        'general.post_v1_threads_thread_id_runs_run_id_submit_tool_outputs',
        Config
      >;
      /**
       * ---
       *
       * [POST] 取消运行
       *
       * **path:** /v1/threads/{thread_id}/runs/{run_id}/cancel
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 此运行所属线程的 ID。
       *   // [required]
       *   thread_id: string
       *   // 要取消的运行的 ID。
       *   // [required]
       *   run_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   assistant_id: string
       *   // [required]
       *   thread_id: string
       *   // [required]
       *   status: string
       *   // [required]
       *   started_at: number
       *   // [required]
       *   expires_at: number
       *   // [required]
       *   cancelled_at: unknown | null
       *   // [required]
       *   failed_at: unknown | null
       *   // [required]
       *   completed_at: unknown | null
       *   // [required]
       *   last_error: unknown | null
       *   // [required]
       *   model: string
       *   // [required]
       *   instructions: string
       *   // [required]
       *   tools: Array<{
       *     type?: string
       *   }>
       *   // [required]
       *   file_ids: string[]
       *   // [required]
       *   metadata: object
       * }
       * ```
       */
      post_v1_threads_thread_id_runs_run_id_cancel<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          started_at: number;
          /**
           * [required]
           */
          expires_at: number;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          completed_at: unknown | null;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        }> & {
          pathParams: {
            /**
             * 此运行所属线程的 ID。
             * [required]
             */
            thread_id: string;
            /**
             * 要取消的运行的 ID。
             * [required]
             */
            run_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          started_at: number;
          /**
           * [required]
           */
          expires_at: number;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          completed_at: unknown | null;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: Array<{
            type?: string;
          }>;
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        },
        'general.post_v1_threads_thread_id_runs_run_id_cancel',
        Config
      >;
      /**
       * ---
       *
       * [POST] 创建线程并运行
       *
       * **path:** /v1/threads/runs
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // 用于执行此运行的助手的 ID 。
       *   // [required]
       *   assistant_id: string
       *   // [required]
       *   thread: {
       *     // 用于启动线程的消息列表。
       *     messages?: Array<{
       *       // 创建消息的实体的角色。目前仅user支持。
       *       // [required]
       *       role: string
       *       // 消息的内容。
       *       // [required]
       *       content: string
       *       // 消息应使用的文件ID列表。一条消息最多可以附加 10 个文件。retrieval对于code_interpreter可以访问和使用文件的工具非常有用。
       *       // [required]
       *       file_ids: string[]
       *       // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *       // [required]
       *       metadata: object
       *     }>
       *     // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *     metadata?: object
       *   }
       *   // 用于执行此运行的模型的 ID 。如果此处提供了值，它将覆盖与助手关联的模型。如果没有，将使用与助手关联的模型。
       *   model?: string
       *   // 覆盖助手的默认系统消息。这对于修改每次运行的行为非常有用。
       *   instructions?: string
       *   // 覆盖助手可用于此运行的工具。这对于修改每次运行的行为非常有用。
       *   tools?: string[]
       *   // 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
       *   metadata?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   assistant_id: string
       *   // [required]
       *   thread_id: string
       *   // [required]
       *   status: string
       *   // [required]
       *   started_at: unknown | null
       *   // [required]
       *   expires_at: number
       *   // [required]
       *   cancelled_at: unknown | null
       *   // [required]
       *   failed_at: unknown | null
       *   // [required]
       *   completed_at: unknown | null
       *   // [required]
       *   last_error: unknown | null
       *   // [required]
       *   model: string
       *   // [required]
       *   instructions: string
       *   // [required]
       *   tools: string[]
       *   // [required]
       *   file_ids: string[]
       *   // [required]
       *   metadata: object
       * }
       * ```
       */
      post_v1_threads_runs<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          started_at: unknown | null;
          /**
           * [required]
           */
          expires_at: number;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          completed_at: unknown | null;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: string[];
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        }> & {
          data: {
            /**
             * 用于执行此运行的助手的 ID 。
             * [required]
             */
            assistant_id: string;
            /**
             * [required]
             */
            thread: {
              /**
               * 用于启动线程的消息列表。
               */
              messages?: Array<{
                /**
                 * 创建消息的实体的角色。目前仅user支持。
                 * [required]
                 */
                role: string;
                /**
                 * 消息的内容。
                 * [required]
                 */
                content: string;
                /**
                 * 消息应使用的文件ID列表。一条消息最多可以附加 10 个文件。retrieval对于code_interpreter可以访问和使用文件的工具非常有用。
                 * [required]
                 */
                file_ids: string[];
                /**
                 * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
                 * [required]
                 */
                metadata: object;
              }>;
              /**
               * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
               */
              metadata?: object;
            };
            /**
             * 用于执行此运行的模型的 ID 。如果此处提供了值，它将覆盖与助手关联的模型。如果没有，将使用与助手关联的模型。
             */
            model?: string;
            /**
             * 覆盖助手的默认系统消息。这对于修改每次运行的行为非常有用。
             */
            instructions?: string;
            /**
             * 覆盖助手可用于此运行的工具。这对于修改每次运行的行为非常有用。
             */
            tools?: string[];
            /**
             * 一组可附加到对象的 16 个键值对。这对于以结构化格式存储有关对象的附加信息非常有用。键的最大长度为 64 个字符，值的最大长度为 512 个字符。
             */
            metadata?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          started_at: unknown | null;
          /**
           * [required]
           */
          expires_at: number;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          completed_at: unknown | null;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          model: string;
          /**
           * [required]
           */
          instructions: string;
          /**
           * [required]
           */
          tools: string[];
          /**
           * [required]
           */
          file_ids: string[];
          /**
           * [required]
           */
          metadata: object;
        },
        'general.post_v1_threads_runs',
        Config
      >;
      /**
       * ---
       *
       * [GET] 检索运行步骤
       *
       * **path:** /v1 /threads/{thread_id}/runs/{run_id}/steps/{step_id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 运行和运行步骤所属线程的 ID。
       *   // [required]
       *   thread_id: string
       *   // 运行步骤所属的运行的 ID。
       *   // [required]
       *   run_id: string
       *   // 要检索的运行步骤的 ID。
       *   // [required]
       *   step_id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   id: string
       *   // [required]
       *   object: string
       *   // [required]
       *   created_at: number
       *   // [required]
       *   run_id: string
       *   // [required]
       *   assistant_id: string
       *   // [required]
       *   thread_id: string
       *   // [required]
       *   type: string
       *   // [required]
       *   status: string
       *   // [required]
       *   cancelled_at: unknown | null
       *   // [required]
       *   completed_at: number
       *   // [required]
       *   expired_at: unknown | null
       *   // [required]
       *   failed_at: unknown | null
       *   // [required]
       *   last_error: unknown | null
       *   // [required]
       *   step_details: {
       *     // [required]
       *     type: string
       *     // [required]
       *     message_creation: {
       *       // [required]
       *       message_id: string
       *     }
       *   }
       * }
       * ```
       */
      get_v1_threads_thread_id_runs_run_id_steps_step_id<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          run_id: string;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          type: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          completed_at: number;
          /**
           * [required]
           */
          expired_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          step_details: {
            /**
             * [required]
             */
            type: string;
            /**
             * [required]
             */
            message_creation: {
              /**
               * [required]
               */
              message_id: string;
            };
          };
        }> & {
          pathParams: {
            /**
             * 运行和运行步骤所属线程的 ID。
             * [required]
             */
            thread_id: string;
            /**
             * 运行步骤所属的运行的 ID。
             * [required]
             */
            run_id: string;
            /**
             * 要检索的运行步骤的 ID。
             * [required]
             */
            step_id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          id: string;
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          created_at: number;
          /**
           * [required]
           */
          run_id: string;
          /**
           * [required]
           */
          assistant_id: string;
          /**
           * [required]
           */
          thread_id: string;
          /**
           * [required]
           */
          type: string;
          /**
           * [required]
           */
          status: string;
          /**
           * [required]
           */
          cancelled_at: unknown | null;
          /**
           * [required]
           */
          completed_at: number;
          /**
           * [required]
           */
          expired_at: unknown | null;
          /**
           * [required]
           */
          failed_at: unknown | null;
          /**
           * [required]
           */
          last_error: unknown | null;
          /**
           * [required]
           */
          step_details: {
            /**
             * [required]
             */
            type: string;
            /**
             * [required]
             */
            message_creation: {
              /**
               * [required]
               */
              message_id: string;
            };
          };
        },
        'general.get_v1_threads_thread_id_runs_run_id_steps_step_id',
        Config
      >;
      /**
       * ---
       *
       * [GET] 列出运行步骤
       *
       * **path:** /v1/threads/{thread_id}/runs/{run_id}/steps
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // 运行和运行步骤所属线程的 ID。
       *   // [required]
       *   thread_id: string
       *   // 运行步骤所属的运行的 ID。
       *   // [required]
       *   run_id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
       *   limit?: number
       *   // created_at按对象的时间戳排序。asc对于升序和desc降序。
       *   order?: string
       *   // 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
       *   after?: string
       *   // 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
       *   before?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [required]
       *   object: string
       *   // [required]
       *   data: Array<{
       *     id?: string
       *     object?: string
       *     created_at?: number
       *     run_id?: string
       *     assistant_id?: string
       *     thread_id?: string
       *     type?: string
       *     status?: string
       *     cancelled_at?: unknown | null
       *     completed_at?: number
       *     expired_at?: unknown | null
       *     failed_at?: unknown | null
       *     last_error?: unknown | null
       *     step_details?: {
       *       // [required]
       *       type: string
       *       // [required]
       *       message_creation: {
       *         // [required]
       *         message_id: string
       *       }
       *     }
       *   }>
       *   // [required]
       *   first_id: string
       *   // [required]
       *   last_id: string
       *   // [required]
       *   has_more: boolean
       * }
       * ```
       */
      get_v1_threads_thread_id_runs_run_id_steps<
        Config extends Alova2MethodConfig<{
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            id?: string;
            object?: string;
            created_at?: number;
            run_id?: string;
            assistant_id?: string;
            thread_id?: string;
            type?: string;
            status?: string;
            cancelled_at?: unknown | null;
            completed_at?: number;
            expired_at?: unknown | null;
            failed_at?: unknown | null;
            last_error?: unknown | null;
            step_details?: {
              /**
               * [required]
               */
              type: string;
              /**
               * [required]
               */
              message_creation: {
                /**
                 * [required]
                 */
                message_id: string;
              };
            };
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        }> & {
          pathParams: {
            /**
             * 运行和运行步骤所属线程的 ID。
             * [required]
             */
            thread_id: string;
            /**
             * 运行步骤所属的运行的 ID。
             * [required]
             */
            run_id: string;
          };
          params: {
            /**
             * 要返回的对象数量的限制。限制范围可以在 1 到 100 之间，默认值为 20。
             */
            limit?: number;
            /**
             * created_at按对象的时间戳排序。asc对于升序和desc降序。
             */
            order?: string;
            /**
             * 用于分页的光标。after是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 after=obj_foo 以获取列表的下一页。
             */
            after?: string;
            /**
             * 用于分页的光标。before是定义您在列表中位置的对象 ID。例如，如果您发出列表请求并收到 100 个以 obj_foo 结尾的对象，则后续调用可以包含 before=obj_foo 以获取列表的上一页。
             */
            before?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<
        {
          /**
           * [required]
           */
          object: string;
          /**
           * [required]
           */
          data: Array<{
            id?: string;
            object?: string;
            created_at?: number;
            run_id?: string;
            assistant_id?: string;
            thread_id?: string;
            type?: string;
            status?: string;
            cancelled_at?: unknown | null;
            completed_at?: number;
            expired_at?: unknown | null;
            failed_at?: unknown | null;
            last_error?: unknown | null;
            step_details?: {
              /**
               * [required]
               */
              type: string;
              /**
               * [required]
               */
              message_creation: {
                /**
                 * [required]
                 */
                message_id: string;
              };
            };
          }>;
          /**
           * [required]
           */
          first_id: string;
          /**
           * [required]
           */
          last_id: string;
          /**
           * [required]
           */
          has_more: boolean;
        },
        'general.get_v1_threads_thread_id_runs_run_id_steps',
        Config
      >;
    };
  }

  var Openais: Openais;
}
